#pragma once

#include "Core.h"

#include "UniquePtr.h"

namespace Core {
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
void *Alloca(size_t sizeInBytes);
//----------------------------------------------------------------------------
void FreeAlloca(void *ptr);
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
template <typename T>
FORCE_INLINE T *TypedAlloca(size_t count) {
    return reinterpret_cast<T *>( Alloca(count * sizeof(T)) );
}
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
template <typename T>
struct AllocaDeleter {
    void operator ()(T* ptr) const { Core::FreeAlloca((void *)ptr); }
};
//----------------------------------------------------------------------------
template <typename T>
using AllocaPtr = UniquePtr<T, AllocaDeleter<T> >;
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
#define MALLOCA(T, _NAME, _COUNT) \
    const Core::AllocaPtr<T> _NAME{ Core::TypedAlloca<T>(_COUNT) }
//----------------------------------------------------------------------------
#define MALLOCA_STACK(T, _NAME, _COUNT) \
    MALLOCA(T, CONCAT(CONCAT(_, _NAME), CONCAT(_Alloca, __LINE__)), _COUNT); \
    MemoryStack<T> _NAME{ (CONCAT(CONCAT(_, _NAME), CONCAT(_Alloca, __LINE__))).get(), _COUNT }
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
class AllocaStartup {
public:
    static void Start(bool mainThread);
    static void Shutdown();

    AllocaStartup(bool mainThread) { Start(mainThread); }
    ~AllocaStartup() { Shutdown(); }
};
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
} //!namespace Core
