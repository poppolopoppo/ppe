@page "/"
@using Editor.App.Data
@using Microsoft.Extensions.Logging
@using System.Net.Http
@using Editor.Remoting;
@inject ILogger<Error> Logger

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
		<MudItem xs="12">
			<MudSelect T=string Label="Choose a traits..." Variant="Variant.Filled" OffsetY="true"
				Disabled="@Busy"
				AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
				ValueChanged="OnTraitsSelectionChanged" >
				@if (AllTraits != null)
				{
					@foreach (string name in AllTraits)
					{
						<MudSelectItem Value="@name" />
					}
				}
			</MudSelect>
		</MudItem>
		@if (Traits != null)
		{
			<MudItem xs="12">
				<MudPaper Elevation="2" Class="pa-4">
					<TraitsWidget Traits=@Traits />
				</MudPaper>
			</MudItem>
		}
	</MudGrid>
</MudContainer>

@code {

	private RTTIEndpointClient RTTI
	{
		get => new RTTIEndpointClient(new HttpClient());
	}

	private List<string> AllTraits = null;
	private RTTITraits Traits = null;
	private bool Busy = false;

	[CascadingParameter]
	public Error Error { get; set; }

	public int TraitsCount
	{
		get => AllTraits != null ? AllTraits.Count : 0;
	}

	protected override async Task OnInitializedAsync()
	{
		AllTraits = new List<string>(await RTTI.TraitsAsync());
		AllTraits.Sort();
	}

	private async void OnTraitsSelectionChanged(string value)
	{
		if (!string.IsNullOrEmpty(value))
		{
			Busy = true;
			try
			{
				Traits = await RTTI.TraitAsync(value);
			}
			finally
			{
				Busy = false;
				if (Traits != null)
				{
					await InvokeAsync(() => StateHasChanged());
				}
				else
				{
					Logger.LogError("Failed to find <{0}>", value);
				}
			}
		}
	}

}
