@using Editor.Remoting

<MudContainer>
	<h3>@Traits.Name</h3>
	<span><u>@Traits._class</u> - <em>@(Traits.SizeInBytes)b</em> (align of @Traits.Alignment) - <small>@Traits.Flags</small></span>
	<hr/>
	<MudContainer>
		<MudExpansionPanels MultiExpansion="true">
		@if (Traits.AsScalar != null)
		{
			if (Traits.AsScalar.ObjectClass != null)
			{
				<MudExpansionPanel Text="@Traits.AsScalar.ObjectClass.Name" Icon="@Icons.Material.Filled.ViewList">
					<ClassWidget Class="@Traits.AsScalar.ObjectClass" />
				</MudExpansionPanel>
			}
			if (Traits.AsScalar.EnumClass != null)
			{
				<MudExpansionPanel Text="@Traits.AsScalar.EnumClass.Name" Icon="@Icons.Material.Filled.ViewList" />
			}
		}
		@if (Traits.AsTuple != null)
		{
			@foreach (var Child in Traits.AsTuple.Tuple)
			{
				<MudExpansionPanel Text="@Child.Name" Icon="@Icons.Material.Filled.ChildCare">
					<TraitsWidget Traits=@Child />
				</MudExpansionPanel>
			}
		}
		@if (Traits.AsList != null)
		{
			<MudExpansionPanel Text="@Traits.AsList.Item.Name" Icon="@Icons.Material.Filled.ListAlt">
				<TraitsWidget Traits=@Traits.AsList.Item />
			</MudExpansionPanel>
		}
		@if (Traits.AsDico != null)
		{
			<MudExpansionPanel Text="@Traits.AsDico.Key.Name" Icon="@Icons.Material.Filled.VpnKey">
				<TraitsWidget Traits=@Traits.AsDico.Key />
			</MudExpansionPanel>
			<MudExpansionPanel Text="@Traits.AsDico.Value.Name" Icon="@Icons.Material.Filled.TakeoutDining">
				<TraitsWidget Traits=@Traits.AsDico.Value />
			</MudExpansionPanel>
		}
		</MudExpansionPanels>
	</MudContainer>
</MudContainer>

@code {
	[Parameter]
	public RTTITraits Traits { get; set; }
}
