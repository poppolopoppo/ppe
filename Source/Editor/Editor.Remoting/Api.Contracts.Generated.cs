//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Editor.Remoting
{
    using System = global::System;

    

    /// <summary>17</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "_class")]
    [JsonInheritanceAttribute("ProcessAbout", typeof(ProcessAbout))]
    [JsonInheritanceAttribute("ProcessMemorySnapshot", typeof(ProcessMemorySnapshot))]
    [JsonInheritanceAttribute("ProcessMemoryTracking", typeof(ProcessMemoryTracking))]
    [JsonInheritanceAttribute("ProcessMemoryStats", typeof(ProcessMemoryStats))]
    [JsonInheritanceAttribute("RTTITraitsDico", typeof(RTTITraitsDico))]
    [JsonInheritanceAttribute("RTTITraits", typeof(RTTITraits))]
    [JsonInheritanceAttribute("RTTITraitsList", typeof(RTTITraitsList))]
    [JsonInheritanceAttribute("RTTITraitsTuple", typeof(RTTITraitsTuple))]
    [JsonInheritanceAttribute("RTTIEnum", typeof(RTTIEnum))]
    [JsonInheritanceAttribute("RTTITraitsScalar", typeof(RTTITraitsScalar))]
    [JsonInheritanceAttribute("RTTIClass", typeof(RTTIClass))]
    [JsonInheritanceAttribute("RTTIProperty", typeof(RTTIProperty))]
    [JsonInheritanceAttribute("RTTIFunction", typeof(RTTIFunction))]
    [JsonInheritanceAttribute("RTTIParameter", typeof(RTTIParameter))]
    [JsonInheritanceAttribute("RTTIModule", typeof(RTTIModule))]
    [JsonInheritanceAttribute("RTTITransaction", typeof(RTTITransaction))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MetaObject : System.ComponentModel.INotifyPropertyChanged
    {
        private string __export;
        private bool? __topObject;
    
        /// <summary>name if exported</summary>
        [Newtonsoft.Json.JsonProperty("_export", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _export
        {
            get { return __export; }
            set
            {
                if (__export != value)
                {
                    __export = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>true if top object</summary>
        [Newtonsoft.Json.JsonProperty("_topObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? _topObject
        {
            get { return __topObject; }
            set
            {
                if (__topObject != value)
                {
                    __topObject = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    /// <summary>19</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "_typeId")]
    [JsonInheritanceAttribute("Bool", typeof(AnyBool))]
    [JsonInheritanceAttribute("Int8", typeof(AnyInt8))]
    [JsonInheritanceAttribute("Int16", typeof(AnyInt16))]
    [JsonInheritanceAttribute("Int32", typeof(AnyInt32))]
    [JsonInheritanceAttribute("Int64", typeof(AnyInt64))]
    [JsonInheritanceAttribute("UInt8", typeof(AnyUInt8))]
    [JsonInheritanceAttribute("UInt16", typeof(AnyUInt16))]
    [JsonInheritanceAttribute("UInt32", typeof(AnyUInt32))]
    [JsonInheritanceAttribute("UInt64", typeof(AnyUInt64))]
    [JsonInheritanceAttribute("Float", typeof(AnyFloat))]
    [JsonInheritanceAttribute("Double", typeof(AnyDouble))]
    [JsonInheritanceAttribute("String", typeof(AnyString))]
    [JsonInheritanceAttribute("WString", typeof(AnyWString))]
    [JsonInheritanceAttribute("Name", typeof(AnyName))]
    [JsonInheritanceAttribute("Dirpath", typeof(AnyDirpath))]
    [JsonInheritanceAttribute("Filename", typeof(AnyFilename))]
    [JsonInheritanceAttribute("MetaObject", typeof(AnyMetaObject))]
    [JsonInheritanceAttribute("BinaryData", typeof(AnyBinaryData))]
    [JsonInheritanceAttribute("OpaqueArray", typeof(AnyOpaqueArray))]
    [JsonInheritanceAttribute("OpaqueData", typeof(AnyOpaqueData))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Any : System.ComponentModel.INotifyPropertyChanged
    {
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyBool : Any
    {
        private bool _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public bool Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyInt8 : Any
    {
        private int _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public int Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyInt16 : Any
    {
        private int _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public int Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyInt32 : Any
    {
        private int _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public int Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyInt64 : Any
    {
        private long _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public long Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyUInt8 : Any
    {
        private int _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyUInt16 : Any
    {
        private int _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyUInt32 : Any
    {
        private long _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyUInt64 : Any
    {
        private long _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyFloat : Any
    {
        private float _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public float Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyDouble : Any
    {
        private double _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        public double Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyString : Any
    {
        private string _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyWString : Any
    {
        private string _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyName : Any
    {
        private string _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyDirpath : Any
    {
        private string _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyFilename : Any
    {
        private string _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyMetaObject : Any
    {
        private MetaObject _inner = new MetaObject();
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MetaObject Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyBinaryData : Any
    {
        private byte[] _inner;
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyOpaqueArray : Any
    {
        private OpaqueArray _inner = new OpaqueArray();
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OpaqueArray Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AnyOpaqueData : Any
    {
        private OpaqueData _inner = new OpaqueData();
    
        [Newtonsoft.Json.JsonProperty("inner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OpaqueData Inner
        {
            get { return _inner; }
            set
            {
                if (_inner != value)
                {
                    _inner = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    /// <summary>3815361517</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OpaqueArray : System.Collections.ObjectModel.Collection<Any>
    {
    
    
    
    }
    
    /// <summary>4074819323</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OpaqueData : System.ComponentModel.INotifyPropertyChanged
    {
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProcessMemorySnapshot : MetaObject
    {
        private long _minSize;
        private long _accumulatedSize;
        private long _numAllocs;
        private long _peakSize;
        private long _totalSize;
        private long _peakAllocs;
        private long _accumulatedAllocs;
        private long _maxSize;
        private long _smallAllocs;
    
        [Newtonsoft.Json.JsonProperty("MinSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MinSize
        {
            get { return _minSize; }
            set
            {
                if (_minSize != value)
                {
                    _minSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AccumulatedSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AccumulatedSize
        {
            get { return _accumulatedSize; }
            set
            {
                if (_accumulatedSize != value)
                {
                    _accumulatedSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("NumAllocs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumAllocs
        {
            get { return _numAllocs; }
            set
            {
                if (_numAllocs != value)
                {
                    _numAllocs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PeakSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PeakSize
        {
            get { return _peakSize; }
            set
            {
                if (_peakSize != value)
                {
                    _peakSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TotalSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalSize
        {
            get { return _totalSize; }
            set
            {
                if (_totalSize != value)
                {
                    _totalSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PeakAllocs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PeakAllocs
        {
            get { return _peakAllocs; }
            set
            {
                if (_peakAllocs != value)
                {
                    _peakAllocs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AccumulatedAllocs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AccumulatedAllocs
        {
            get { return _accumulatedAllocs; }
            set
            {
                if (_accumulatedAllocs != value)
                {
                    _accumulatedAllocs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("MaxSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MaxSize
        {
            get { return _maxSize; }
            set
            {
                if (_maxSize != value)
                {
                    _maxSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SmallAllocs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long SmallAllocs
        {
            get { return _smallAllocs; }
            set
            {
                if (_smallAllocs != value)
                {
                    _smallAllocs = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProcessMemoryTracking : MetaObject
    {
        private ProcessMemorySnapshot _user;
        private string _domain;
        private string _parent;
        private ProcessMemorySnapshot _system;
    
        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcessMemorySnapshot User
        {
            get { return _user; }
            set
            {
                if (_user != value)
                {
                    _user = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain
        {
            get { return _domain; }
            set
            {
                if (_domain != value)
                {
                    _domain = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent
        {
            get { return _parent; }
            set
            {
                if (_parent != value)
                {
                    _parent = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcessMemorySnapshot System
        {
            get { return _system; }
            set
            {
                if (_system != value)
                {
                    _system = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProcessMemoryStats : MetaObject
    {
        private long _pageSize;
        private long _cacheLineSize;
        private long _peakUsedVirtual;
        private long _usedVirtual;
        private long _availableVirtual;
        private long _peakUsedPhysical;
        private long _usedPhysical;
        private long _allocationGranularity;
        private long _availablePhysical;
    
        [Newtonsoft.Json.JsonProperty("PageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PageSize
        {
            get { return _pageSize; }
            set
            {
                if (_pageSize != value)
                {
                    _pageSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("CacheLineSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CacheLineSize
        {
            get { return _cacheLineSize; }
            set
            {
                if (_cacheLineSize != value)
                {
                    _cacheLineSize = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PeakUsedVirtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PeakUsedVirtual
        {
            get { return _peakUsedVirtual; }
            set
            {
                if (_peakUsedVirtual != value)
                {
                    _peakUsedVirtual = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("UsedVirtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UsedVirtual
        {
            get { return _usedVirtual; }
            set
            {
                if (_usedVirtual != value)
                {
                    _usedVirtual = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AvailableVirtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvailableVirtual
        {
            get { return _availableVirtual; }
            set
            {
                if (_availableVirtual != value)
                {
                    _availableVirtual = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PeakUsedPhysical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PeakUsedPhysical
        {
            get { return _peakUsedPhysical; }
            set
            {
                if (_peakUsedPhysical != value)
                {
                    _peakUsedPhysical = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("UsedPhysical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UsedPhysical
        {
            get { return _usedPhysical; }
            set
            {
                if (_usedPhysical != value)
                {
                    _usedPhysical = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AllocationGranularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AllocationGranularity
        {
            get { return _allocationGranularity; }
            set
            {
                if (_allocationGranularity != value)
                {
                    _allocationGranularity = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("AvailablePhysical", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvailablePhysical
        {
            get { return _availablePhysical; }
            set
            {
                if (_availablePhysical != value)
                {
                    _availablePhysical = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProcessAbout : MetaObject
    {
        private string _host;
        private string _revision;
        private string _platformShortName;
        private string _platformFullName;
        private string _branch;
        private string _platformDisplayName;
        private string _directory;
        private string _family;
        private System.Collections.Generic.ICollection<string> _args;
        private System.Collections.Generic.ICollection<string> _features;
        private string _compiler;
        private string _executable;
        private string _userName;
        private long _timestamp;
        private string _os;
    
        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host
        {
            get { return _host; }
            set
            {
                if (_host != value)
                {
                    _host = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Revision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PlatformShortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformShortName
        {
            get { return _platformShortName; }
            set
            {
                if (_platformShortName != value)
                {
                    _platformShortName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PlatformFullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformFullName
        {
            get { return _platformFullName; }
            set
            {
                if (_platformFullName != value)
                {
                    _platformFullName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Branch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branch
        {
            get { return _branch; }
            set
            {
                if (_branch != value)
                {
                    _branch = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("PlatformDisplayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformDisplayName
        {
            get { return _platformDisplayName; }
            set
            {
                if (_platformDisplayName != value)
                {
                    _platformDisplayName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Directory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Directory
        {
            get { return _directory; }
            set
            {
                if (_directory != value)
                {
                    _directory = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Family", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Family
        {
            get { return _family; }
            set
            {
                if (_family != value)
                {
                    _family = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;String&gt;</summary>
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Args
        {
            get { return _args; }
            set
            {
                if (_args != value)
                {
                    _args = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;String&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Features
        {
            get { return _features; }
            set
            {
                if (_features != value)
                {
                    _features = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Compiler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Compiler
        {
            get { return _compiler; }
            set
            {
                if (_compiler != value)
                {
                    _compiler = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Executable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Executable
        {
            get { return _executable; }
            set
            {
                if (_executable != value)
                {
                    _executable = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Os", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Os
        {
            get { return _os; }
            set
            {
                if (_os != value)
                {
                    _os = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITraitsDico : RTTITraits
    {
        private RTTITraits _value;
        private RTTITraits _key;
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITraitsList : RTTITraits
    {
        private RTTITraits _item;
    
        [Newtonsoft.Json.JsonProperty("item", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Item
        {
            get { return _item; }
            set
            {
                if (_item != value)
                {
                    _item = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITraitsTuple : RTTITraits
    {
        private System.Collections.Generic.ICollection<RTTITraits> _tuple;
    
        /// <summary>TList&lt;RTTITraits&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Tuple", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTITraits> Tuple
        {
            get { return _tuple; }
            set
            {
                if (_tuple != value)
                {
                    _tuple = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIEnum : MetaObject
    {
        private long _flags;
        private RTTITraits _traits;
        private string _name;
        private System.Collections.Generic.ICollection<string> _keys;
        private System.Collections.Generic.ICollection<long> _values;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Traits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Traits
        {
            get { return _traits; }
            set
            {
                if (_traits != value)
                {
                    _traits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;Name&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Keys
        {
            get { return _keys; }
            set
            {
                if (_keys != value)
                {
                    _keys = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;Int64&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Values
        {
            get { return _values; }
            set
            {
                if (_values != value)
                {
                    _values = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITraitsScalar : RTTITraits
    {
        private RTTIEnum _enumClass;
        private RTTIClass _objectClass;
    
        [Newtonsoft.Json.JsonProperty("EnumClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTIEnum EnumClass
        {
            get { return _enumClass; }
            set
            {
                if (_enumClass != value)
                {
                    _enumClass = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("ObjectClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTIClass ObjectClass
        {
            get { return _objectClass; }
            set
            {
                if (_objectClass != value)
                {
                    _objectClass = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITraits : MetaObject
    {
        private int _flags;
        private long _sizeInBytes;
        private long _alignment;
        private long _typeId;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("SizeInBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long SizeInBytes
        {
            get { return _sizeInBytes; }
            set
            {
                if (_sizeInBytes != value)
                {
                    _sizeInBytes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Alignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Alignment
        {
            get { return _alignment; }
            set
            {
                if (_alignment != value)
                {
                    _alignment = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("TypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long TypeId
        {
            get { return _typeId; }
            set
            {
                if (_typeId != value)
                {
                    _typeId = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIProperty : MetaObject
    {
        private long _flags;
        private RTTITraits _traits;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Traits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Traits
        {
            get { return _traits; }
            set
            {
                if (_traits != value)
                {
                    _traits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIParameter : MetaObject
    {
        private long _flags;
        private RTTITraits _traits;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Traits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Traits
        {
            get { return _traits; }
            set
            {
                if (_traits != value)
                {
                    _traits = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIFunction : MetaObject
    {
        private RTTITraits _result;
        private long _flags;
        private System.Collections.Generic.ICollection<RTTIParameter> _parameters;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTITraits Result
        {
            get { return _result; }
            set
            {
                if (_result != value)
                {
                    _result = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;RTTIParameter&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTIParameter> Parameters
        {
            get { return _parameters; }
            set
            {
                if (_parameters != value)
                {
                    _parameters = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIClass : MetaObject
    {
        private long _flags;
        private System.Collections.Generic.ICollection<RTTIProperty> _properties;
        private RTTIClass _parent;
        private System.Collections.Generic.ICollection<RTTIFunction> _functions;
        private string _name;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;RTTIProperty&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTIProperty> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RTTIClass Parent
        {
            get { return _parent; }
            set
            {
                if (_parent != value)
                {
                    _parent = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;RTTIFunction&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Functions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTIFunction> Functions
        {
            get { return _functions; }
            set
            {
                if (_functions != value)
                {
                    _functions = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTIModule : MetaObject
    {
        private System.Collections.Generic.ICollection<RTTIClass> _classes;
        private string _name;
        private System.Collections.Generic.ICollection<RTTIEnum> _enums;
    
        /// <summary>TList&lt;RTTIClass&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Classes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTIClass> Classes
        {
            get { return _classes; }
            set
            {
                if (_classes != value)
                {
                    _classes = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;RTTIEnum&gt;</summary>
        [Newtonsoft.Json.JsonProperty("Enums", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RTTIEnum> Enums
        {
            get { return _enums; }
            set
            {
                if (_enums != value)
                {
                    _enums = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RTTITransaction : MetaObject
    {
        private long _flags;
        private System.Collections.Generic.ICollection<MetaObject> _topObjects;
        private string _namespace;
        private long _state;
    
        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Flags
        {
            get { return _flags; }
            set
            {
                if (_flags != value)
                {
                    _flags = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>TList&lt;MetaObject&gt;</summary>
        [Newtonsoft.Json.JsonProperty("TopObjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetaObject> TopObjects
        {
            get { return _topObjects; }
            set
            {
                if (_topObjects != value)
                {
                    _topObjects = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace
        {
            get { return _namespace; }
            set
            {
                if (_namespace != value)
                {
                    _namespace = value;
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }
    
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.5.2.0 (Newtonsoft.Json v12.0.0.0)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminatorValue = jObject.GetValue(_discriminator);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);
           
            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016