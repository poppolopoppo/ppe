#pragma once

#include "Core/Core.h"

namespace Core {
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
constexpr float F_Epsilon = 1e-3f;
constexpr float F_EpsilonSQ = 1e-9f;
constexpr float F_PI = 3.14159265359f;
constexpr float F_2PI = 6.28318530718f;
constexpr float F_3PI = 9.42477796077f;
constexpr float F_4PI = 12.5663706144f;
constexpr float F_PIOver3 = 1.0471975512f;
constexpr float F_PIOver4 = 0.78539816339f;
constexpr float F_2PIOver3 = 2.09439510239f;
constexpr float F_HalfPi = 1.57079632679f;
constexpr float F_Deg2Rad = 0.01745329251f;
constexpr float F_Rad2Deg = 57.2957795131f;
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr T BarycentricLerp(T v0, T v1, T v2, U f0, U f1, U f2);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Clamp(T value, T vmin, T vmax);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Frac(T f);
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr T Lerp(T v0, T v1, U f);
//----------------------------------------------------------------------------
template <typename T>
constexpr float LinearStep(T value, T vmin, T vmax);
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr T Pow(T v, U n);
//----------------------------------------------------------------------------
template <typename U>
float Pow(float f, U n);
//----------------------------------------------------------------------------
template <typename U>
double Pow(double d, U n);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Rcp(T f);
//----------------------------------------------------------------------------
template <typename T>
constexpr T RSqrt(T f);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Saturate(T value) { return Clamp(value, T(0), T(1)); }
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr T SLerp(T v0, T v1, U f);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Sqr(T x);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Sqrt(T x);
//----------------------------------------------------------------------------
template <typename T>
constexpr T Step(T y, T x);
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr U Smoothstep(T vmin, T vmax, U f);
//----------------------------------------------------------------------------
template <typename T, typename U>
constexpr U Smootherstep(T vmin, T vmax, U f);
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
constexpr float Degrees(float radians);
//----------------------------------------------------------------------------
constexpr float Radians(float degrees);
//----------------------------------------------------------------------------
template <typename T>
FORCE_INLINE void SinCos(T radians, T *fsin, T *fcos);
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
bool NearlyEquals(float A, float B, float maxRelDiff=1e-3f);
//----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
} //!namespace Core

#include "Core/Maths/MathHelpers-inl.h"
