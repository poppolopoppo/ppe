<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- https://code.msdn.microsoft.com/windowsdesktop/Writing-type-visualizers-2eae77a2 -->

  <Type Name="Core::Meta::TPointerWFlags&lt;*&gt;">
    <DisplayString>{{ ptr={($T1*)(size_t(_pFlags)&amp;~3)} flag0={(_pFlags&amp;1)!=0} flag1={(_pFlags&amp;2)!=0} flag01={_pFlags&amp;3} }}</DisplayString>
    <Expand>
      <Item Name="Pointer">($T1*)(size_t(_pFlags)&amp;~3)</Item>
      <Item Name="Flag0">(_pFlags&amp;1)!=0</Item>
      <Item Name="Flag1">(_pFlags&amp;2)!=0</Item>
      <Item Name="Flag01">_pFlags&amp;3</Item>
    </Expand>
  </Type>

  <Type Name="Core::TBasicString&lt;char&gt;">
    <DisplayString Condition="_large.IsLarge == 0">{_small.Buffer,[_small.Size]s} [small:{size_t(_small.Size)}]</DisplayString>
    <DisplayString Condition="_large.IsLarge != 0">{_large.Storage,[_large.Size]s} [large:{size_t(_large.Size)}]</DisplayString>
    <StringView Condition="_large.IsLarge == 0">_small.Buffer,[_small.Size]s</StringView>
    <StringView Condition="_large.IsLarge != 0">_large.Storage,[_large.Size]s</StringView>
    <Expand>
      <Item Condition="_large.IsLarge == 0" Name="Content">_small.Buffer,[_small.Size]s</Item>
      <Item Condition="_large.IsLarge == 0" Name="Size">size_t(_small.Size)</Item>
      <Item Condition="_large.IsLarge == 0" Name="Capacity">sizeof(_small.Buffer)/sizeof(_small.Buffer[0])</Item>
      <Item Condition="_large.IsLarge != 0" Name="Content">_large.Storage,[_large.Size]s</Item>
      <Item Condition="_large.IsLarge != 0" Name="Size">_large.Size</Item>
      <Item Condition="_large.IsLarge != 0" Name="Capacity">_large.Capacity</Item>
      <Item Name="SBO">!!!_large.IsLarge</Item>
    </Expand>
  </Type>
  <Type Name="Core::TBasicString&lt;wchar_t&gt;">
    <DisplayString Condition="_large.IsLarge == 0">{_small.Buffer,[_small.Size]su} [small:{size_t(_small.Size)}]</DisplayString>
    <DisplayString Condition="_large.IsLarge != 0">{_large.Storage,[_large.Size]su} [large:{size_t(_large.Size)}]</DisplayString>
    <StringView Condition="_large.IsLarge == 0">_small.Buffer,[_small.Size]su</StringView>
    <StringView Condition="_large.IsLarge != 0">_large.Storage,[_large.Size]su</StringView>
    <Expand>
      <Item Condition="_large.IsLarge == 0" Name="Content">_small.Buffer,[_small.Size]su</Item>
      <Item Condition="_large.IsLarge == 0" Name="Size">size_t(_small.Size)</Item>
      <Item Condition="_large.IsLarge == 0" Name="Capacity">sizeof(_small.Buffer)/sizeof(_small.Buffer[0])</Item>
      <Item Condition="_large.IsLarge != 0" Name="Content">_large.Storage,[_large.Size]su</Item>
      <Item Condition="_large.IsLarge != 0" Name="Size">_large.Size</Item>
      <Item Condition="_large.IsLarge != 0" Name="Capacity">_large.Capacity</Item>
      <Item Name="SBO">!!!_large.IsLarge</Item>
    </Expand>
  </Type>

  <Type Name="Core::TBasicStringView&lt;char&gt;">
    <DisplayString Condition="_size == 0">empty</DisplayString>
    <DisplayString>{_storage,[_size]s} [{_size}]</DisplayString>
    <StringView>_storage,[_size]s</StringView>
  </Type>
  <Type Name="Core::TBasicStringView&lt;wchar_t&gt;">
    <DisplayString Condition="_size == 0">empty</DisplayString>
    <DisplayString>{_storage,[_size]su} [{_size}]</DisplayString>
    <StringView>_storage,[_size]su</StringView>
  </Type>

  <Type Name="Core::TMemoryView&lt;*&gt;">
    <DisplayString Condition="_size == 0">empty</DisplayString>
    <DisplayString>{"$T1"} [{_size}] = {_storage}</DisplayString>
    <Expand>
      <Item Name="[Size]">_size</Item>
      <ArrayItems>
        <Size>_size</Size>
        <ValuePointer>_storage</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TVectorInSitu&lt;*, *, *&gt;">
    <DisplayString>{{ size={_size}, capacity={_capacity}, insitu={_insituCount/sizeof(value_type)} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">_size</Item>
      <Item Name="[Capacity]">_capacity</Item>
      <Item Name="[Insitu]">_insituCount/sizeof(value_type)</Item>
      <ArrayItems>
        <Size>_size</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="Core::TVector&lt;*, *&gt;">
    <DisplayString>{{ size={_size}, capacity={_capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">_size</Item>
      <Item Name="[Capacity]">_capacity</Item>
      <ArrayItems>
        <Size>_size</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TBasicHashTable&lt;*, *, *, *&gt;">
    <DisplayString>{{ size={_data.Size}, capacity={_data.Capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">_data.Size</Item>
      <Item Name="[Capacity]">_data.Capacity</Item>
      <Item Name="[States]" ExcludeView="simple">(Core::details::FHashTableData_::EState*)_data.StatesAndBuckets, [_data.Capacity ? _data.Capacity + Core::details::FHashTableData_::GGroupSize : 0]</Item>
      <!-- <Item Name="Offset of Buckets">(((_data.Capacity ? _data.Capacity + Core::details::FHashTableData_::GGroupSize : 0) + (sizeof($T1::value_type) - 1)) / sizeof($T1::value_type))</Item> -->
      <Item Name="[Buckets]" ExcludeView="simple">($T1::value_type*)_data.StatesAndBuckets + (((_data.Capacity ? _data.Capacity + Core::details::FHashTableData_::GGroupSize : 0) + (sizeof($T1::value_type) - 1)) / sizeof($T1::value_type)), [_data.Capacity]</Item>
      <CustomListItems>
        <Variable Name="index" InitialValue="0" />
        <Variable Name="state" InitialValue="(Core::details::FHashTableData_::EState*)_data.StatesAndBuckets" />
        <Variable Name="bucket" InitialValue="($T1::value_type*)_data.StatesAndBuckets + (((_data.Capacity ? _data.Capacity + Core::details::FHashTableData_::GGroupSize : 0) + (sizeof($T1::value_type) - 1)) / sizeof($T1::value_type))" />
        <Size>_data.Size</Size>
        <Loop>
            <If Condition="index == _data.Capacity">
                <Break />
            </If>
            <If Condition="(state[index] &amp; Core::details::FHashTableData_::kDeleted) == 0">
                <Item>bucket[index]</Item>
            </If>
            <Exec>++index</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="Core::TRawStorage&lt;*, *&gt;">
    <DisplayString>{{ size={_size} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">_size</Item>
      <ArrayItems>
        <Size>_size</Size>
        <ValuePointer>_storage</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TRingBuffer&lt;*, *&gt;">
    <DisplayString>{{ begin={_begin}, size={_size}, capacity={_capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Begin]">_begin</Item>
      <Item Name="[Size]">_size</Item>
      <Item Name="[Capacity]">_capacity</Item>
      <ArrayItems>
        <Size>_capacity</Size>
        <ValuePointer>_storage</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TStack&lt;*, *&gt;">
    <DisplayString>{{ size={_size}, capacity={_capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Size]">_size</Item>
      <Item Name="[Capacity]">_capacity</Item>
      <ArrayItems>
        <Size>_size</Size>
        <ValuePointer>_storage</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TScalarVector&lt;*, 1&gt;">
    <DisplayString>{{ X={_data[0]} }}[1]</DisplayString>
    <Expand>
      <Item Name="[Dim]">1</Item>
      <ArrayItems>
        <Size>1</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="Core::TScalarVector&lt;*, 2&gt;">
    <DisplayString>{{ X={_data[0]}, Y={_data[1]} }}[2]</DisplayString>
    <Expand>
      <Item Name="[Dim]">2</Item>
      <ArrayItems>
        <Size>2</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="Core::TScalarVector&lt;*, 3&gt;">
    <DisplayString>{{ X={_data[0]}, Y={_data[1]}, Z={_data[2]} }}[3]</DisplayString>
    <Expand>
      <Item Name="[Dim]">3</Item>
      <ArrayItems>
        <Size>3</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="Core::TScalarVector&lt;*, 4&gt;">
    <DisplayString>{{ X={_data[0]}, Y={_data[1]}, Z={_data[2]}, W={_data[3]} }}[4]</DisplayString>
    <Expand>
      <Item Name="[Dim]">4</Item>
      <ArrayItems>
        <Size>4</Size>
        <ValuePointer>_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TScalarMatrix&lt;*, *, *&gt;">
    <Expand>
      <ArrayItems>
        <Direction>Forward</Direction>
        <Rank>2</Rank>
        <Size>$T3</Size>
        <ValuePointer>_data.raw</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="Core::TToken&lt;*, char, *, * &gt;">
    <DisplayString Condition="_handle != nullptr">{(const char*)(_handle+1),[(int)_handle-&gt;Length]s}</DisplayString>
    <DisplayString>empty</DisplayString>
    <StringView>(const char*)(_handle+1),[(int)_handle-&gt;Length]s</StringView>
    <Expand>
      <Item Name="String" Condition="_handle != nullptr">(const char*)(_handle+1),[(int)_handle-&gt;Length]s</Item>
      <Item Name="Length" Condition="_handle != nullptr">(int)_handle-&gt;Length</Item>
      <Item Name="HashValue" Condition="_handle != nullptr">(int)_handle-&gt;HashValue,X</Item>
    </Expand>
  </Type>
  <Type Name="Core::TToken&lt;*, wchar_t, *, * &gt;">
    <DisplayString Condition="_handle != nullptr">{(const wchar_t*)(_handle+1),[(int)_handle-&gt;Length]su}</DisplayString>
    <DisplayString Condition="_handle == nullptr">empty</DisplayString>
    <StringView>(const wchar_t*)(_handle+1),[(int)_handle-&gt;Length]su</StringView>
    <Expand>
      <Item Name="String" Condition="_handle != nullptr">(const wchar_t*)(_handle+1),[(int)_handle-&gt;Length]su</Item>
      <Item Name="Length" Condition="_handle != nullptr">(int)_handle-&gt;Length</Item>
      <Item Name="HashValue" Condition="_handle != nullptr">(int)_handle-&gt;HashValue,X</Item>
    </Expand>
  </Type>

  <Type Name="Core::FFileSystemNode">
    <DisplayString>{_token}</DisplayString>
    <Expand>
      <Item Name="Depth">_depth</Item>
      <LinkedListItems>
        <Size>_depth</Size>
        <HeadPointer>this</HeadPointer>
        <NextPointer>_parent._ptr</NextPointer>
        <ValueNode>*this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="Core::FBasename">
    <DisplayString>{_basenameNoExt} {_extname}</DisplayString>
  </Type>
  <Type Name="Core::FDirpath">
    <DisplayString Condition="_path._ptr != nullptr">[{_path._ptr-&gt;_depth}] {*_path._ptr}"</DisplayString>
    <DisplayString>empty</DisplayString>
    <Expand>
      <Item Name="Depth">_path._ptr-&gt;_depth</Item>
      <Item Name="Path" Condition="_path._ptr != nullptr">*_path._ptr</Item>
    </Expand>
  </Type>

  <Type Name="Core::RTTI::TMetaTypeAtom&lt;* &gt;">
    <DisplayString>{_wrapper}</DisplayString>
    <Expand>
      <ExpandedItem>_wrapper</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Core::TRefPtr&lt;* &gt;">
    <DisplayString>{_ptr}</DisplayString>
    <Expand>
      <Item Name="RefCount" Condition="_ptr != nullptr">_ptr-&gt;_refCount</Item>
      <ExpandedItem>_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Core::TSafePtr&lt;* &gt;">
    <DisplayString>{_ptr}</DisplayString>
    <Expand>
      <Item Name="RefCount" Condition="_ptr != nullptr">_ptr-&gt;_refCount</Item>
      <Item Name="SafeCount" Condition="_ptr != nullptr">_ptr-&gt;_safeRefCount</Item>
      <ExpandedItem>_ptr</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Core::TInSituPtr&lt;* &gt;">
    <DisplayString Condition="VTable != 0xDEADF001DEADF001ull &amp;&amp; VTable != 0xDEADF001ul">{($T1*)(&amp;InSitu),na}</DisplayString>
    <DisplayString>empty</DisplayString>
    <Expand>
      <ExpandedItem Condition="VTable != 0xDEADF001DEADF001ull &amp;&amp; VTable != 0xDEADF001ul">($T1*)(&amp;InSitu),na</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Core::RTTI::ITypeTraits">
    <DisplayString>[{TypeId()}] {TypeInfos()._name._storage, [TypeInfos()._name._size]}, {TypeInfos()._flags, en} ({TypeInfos()._sizeInBytes}b)</DisplayString>
  </Type>

  <Type Name="Core::RTTI::FAny">
    <DisplayString>{Core::RTTI::PrettyString(*this)}</DisplayString>
    <Expand>
        <Item Name="Data">Data()</Item>
        <Item Name="Traits">_traits</Item>
        <Item Name="PP">Core::RTTI::PrettyString(*this)</Item>
    </Expand>
  </Type>

  <Type Name="Core::RTTI::FAtom">
    <DisplayString>{Core::RTTI::PrettyString(*this)}</DisplayString>
    <Expand>
        <Item Name="Data">_data</Item>
        <Item Name="Traits">_traits</Item>
        <Item Name="PP">Core::RTTI::PrettyString(*this)</Item>
    </Expand>
  </Type>

  <Type Name="Core::RTTI::FMetaObject">
    <DisplayString>{Core::RTTI::PrettyString(this)}</DisplayString>
    <Expand>
        <Item Name="Name">_name</Item>
        <Item Name="Flags">_flags, en</Item>
        <Item Name="Class">RTTI_Class(), na</Item>
        <Item Name="Functions">RTTI_Class()->_functionsAll</Item>
        <Item Name="Properties">RTTI_Class()->_propertiesAll</Item>
        <Item Name="PP">Core::RTTI::PrettyString(this)</Item>
    </Expand>
  </Type>

  <Type Name="Core::Serialize::FJSON::FValue">
    <DisplayString Condition="Core::Serialize::FJSON::Null    == _type">null</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::Bool    == _type">Bool {_bool}</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::Integer == _type">Integer {_integer}</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::Float   == _type">Float {_float}</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::String  == _type">String {_string}</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::Array   == _type">Array {_array}</DisplayString>
    <DisplayString Condition="Core::Serialize::FJSON::Object  == _type">Object {_object}</DisplayString>
    <Expand>
      <Item Condition="Core::Serialize::FJSON::Bool    == _type" Name="[Bool]">_bool</Item>
      <Item Condition="Core::Serialize::FJSON::Integer == _type" Name="[Integer]">_integer</Item>
      <Item Condition="Core::Serialize::FJSON::Float   == _type" Name="[Float]">_float</Item>
      <Item Condition="Core::Serialize::FJSON::String  == _type" Name="[String]">_string</Item>
      <Item Condition="Core::Serialize::FJSON::Array   == _type" Name="[Array]">_array</Item>
      <Item Condition="Core::Serialize::FJSON::Object  == _type" Name="[Object]">_object</Item>
    </Expand>
  </Type>

</AutoVisualizer>
