
// Visual Studio Project Generation
//--------------------------------------------------------------------------
VCXProject( '$ProjectName$-proj' )
{
    .ProjectOutput              = '$ProjectPath$\$ProjectName$.vcxproj'
    .ProjectInputPaths          = '$ProjectPath$\'
    .ProjectBasePath            = '$ProjectPath$\'

    .LocalDebuggerCommand       = '^$(ProjectDir)..\..\$OutputBase$\Binary\$ProjectName$-^$(PlatformTarget)-^$(Configuration).exe'
    .LocalDebuggerWorkingDirectory = '^$(ProjectDir)..\..\'
}

// Windows Resources
//--------------------------------------------------------------------------
ObjectList( '$ProjectName$-Res' )
{
    Using( .ResourceCompiler )

    .CompilerInputFiles         = '$ProjectPath$\$ProjectName$.rc'
    .CompilerOutputPath         = '$OutputBase$\Resources\$ProjectPath$\'
}

// Unity
//--------------------------------------------------------------------------
Unity( '$ProjectName$-UnityGenerate' )
{
    .UnityInputPath             = '$ProjectPath$\'
    .UnityOutputPath            = '$OutputBase$\Unity\$ProjectPath$\'
}

// Windows (MSVC)
//--------------------------------------------------------------------------
// Lib
ForEach( .CompileConfig in .Configs_Windows_MSVC )
{
    Using( .CompileConfig )

    .OutputBinary       = '$OutputBase$\Binary'
    .OutputBase         + '\Intermediate\$Platform$-$Config$'
    .IncludePath        = ' -I"$ProjectPath$" -I"$ProjectPath$\.." -I"$AdditionalInclude$"'

    // Static Library
    Library( '$ProjectName$-Lib-$Platform$-$Config$' )
    {
        // Input (Unity)
        .CompilerInputUnity         = '$ProjectName$-UnityGenerate'
        .CompilerOptions            + ' $IncludePath$'
        .PreprocessorOptions        + ' $IncludePath$'

        // Output
        .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
        .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.lib'
    }

    // Executable
    Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
    {
        .Libraries                  = { 'Core-Lib-$Platform$-$Config$',
                                        'Core.Serialize-Lib-$Platform$-$Config$',
                                        'Core.Graphics-Lib-$Platform$-$Config$',
                                        'Core.Logic-Lib-$Platform$-$Config$',
                                        'Core.Engine-Lib-$Platform$-$Config$',
                                        'Core.Application-Lib-$Platform$-$Config$',
                                        '$ProjectName$-Res',
                                        '$ProjectName$-Lib-$Platform$-$Config$' }

        .LinkerOutput               = '$OutputBinary$\$ProjectName$-$Platform$-$Config$.exe'
        .LinkerOptions              + ' /LIBPATH:"$AdditionalLibInclude$\$Platform$\"'
    }
    Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Exe-$Platform$-$Config$' }
}

// Windows (Clang)
//--------------------------------------------------------------------------
ForEach( .CompileConfig in .Configs_Windows_Clang )
{
    Using( .CompileConfig )

    .OutputBase         + '\Intermediate\$Platform$-$Config$'
    .IncludePath        = ' -I"$ProjectPath$" -I"$SourceBase$" -I"$AdditionalInclude$"'

    // Static Library
    Library( '$ProjectName$-Lib-$Platform$-$Config$' )
    {
        // Input (Unity)
        .CompilerInputUnity         = '$ProjectName$-UnityGenerate'
        .CompilerOptions            + ' $IncludePath$'
        .PreprocessorOptions        + ' $IncludePath$'

        // Output
        .CompilerOutputPath         = '$OutputBase$\$ProjectName$\'
        .LibrarianOutput            = '$OutputBase$\$ProjectName$\$ProjectName$.lib'
    }
    Alias( '$ProjectName$-$Platform$-$Config$' ) { .Targets = '$ProjectName$-Lib-$Platform$-$Config$' }
}

// Aliases
//--------------------------------------------------------------------------
// Per-Config
Alias( '$ProjectName$-Debug' )      { .Targets = { '$ProjectName$-X86-Debug',   '$ProjectName$-X64-Debug' } }
Alias( '$ProjectName$-Profile' )    { .Targets = { '$ProjectName$-X86-Profile', '$ProjectName$-X64-Profile' } }
Alias( '$ProjectName$-Release' )    { .Targets = { '$ProjectName$-X86-Release', '$ProjectName$-X64-Release' } }
Alias( '$ProjectName$-Final' )      { .Targets = { '$ProjectName$-X86-Final',   '$ProjectName$-X64-Final' } }

// Per-Platform
Alias( '$ProjectName$-X86' )        { .Targets = { '$ProjectName$-X86-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X86-Profile', '$ProjectName$-X86-Final' } }
Alias( '$ProjectName$-X64' )        { .Targets = { '$ProjectName$-X64-Debug', '$ProjectName$-X64-Release', '$ProjectName$-X64-Profile', '$ProjectName$-X64-Final' } }
Alias( '$ProjectName$-X86-Clang' )  { .Targets = { '$ProjectName$-X86-Clang-Debug' } }

// All
Alias( '$ProjectName$' )
{
    .Targets = { '$ProjectName$-Debug', '$ProjectName$-Release', '$ProjectName$-Profile', '$ProjectName$-Final' }
}
