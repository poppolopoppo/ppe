#once

; utilise la toolchain 64 bits pour compiler en 32
#define USE_VISUAL2017_NATIVE_ENVIRONMENT
; 2X Faster Links, mais TODO: les versions ne doivent pas utiliser ça
#define USE_VISUAL2017_DEBUG_FASTLINK
; activer la protection du flux de controle
//#define USE_VISUAL2017_GUARD_CF /// this is more a runtime security feature than a developer help
; affiche a rapport avec les EBCO (Empty Base Class Optimizations) possibles (à utiliser avec -buildlog)
;#define USE_VISUAL2017_EBCO_REPORT
; définit l'encoding des sources et du binaires en UTF-8 par défaut
#define USE_VISUAL2017_UT8_CHARSET
; choisit le standard C++ utilisé (C++14 par défaut)
//#define USE_VISUAL2017_STD_2014
#define USE_VISUAL2017_STD_2017
//#define USE_VISUAL2017_STD_LATEST
; considere les include <> comme headers systèmes et ignore leurs warnings
#define USE_VISUAL2017_EXTERNAL_ANGLEBRACKETS // TODO : this is still experimental
; de nouveaux warnings expérimentaux ont été ajoutés dans 15.3.0
#define USE_VISUAL2017_DIAGNOSTIC_IMPROVEMENTS
; intégre le fichier .natvis au pdb (nouveau dans VS2017)
#define USE_VISUAL2017_LINK_NATVIS
; supprime un warning de dépréciation de std::iterator
#define USE_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
; supprime un warning de changement d'ABI depuis 15.8
#define USE_VISUAL2017_EXTENDED_ALIGNED_STORAGE
; active l'utilisation des Pre-Compiled Headers (/Yu, /Yc)
#define USE_PRECOMPILED_HEADERS // %_NOCOMMIT%
; utilise les .obj plutôt que les .lib comme input du linker (encore nécessaire ?)
;#define USE_LIBRARY_DEPENDENCY_INPUT
; utilise le linker incremental en profiling
#define USE_LTCG_INCREMENTAL_LINKER_IN_PROFILING

#include "MSVCBase.bff"

//------------------------------------------------------------------------------
// Global Properties
//------------------------------------------------------------------------------

.MSVC2017PlatformToolset = 'v141'

; VS141COMNTOOLS ou VS150COMNTOOLS n'est plus défini par Visual 2017 ...
; https://stackoverflow.com/questions/42713238/reliable-way-to-find-the-location-devenv-exe-of-visual-studio-2017
; #import VS141COMNTOOLS
.MSVC2017BinPath = "$VS141COMNTOOLS$../../VC/Tools/MSVC/$VS141VERSION$/bin"
Print( "Using Visual 2017 installation found in '$MSVC2017BinPath$'" )

.PATH   = "$VS141COMNTOOLS$../IDE;"
        + "$MSVC2017BinPath$/HostX86/x86;"
        + "$MSVC2017BinPath$/HostX64/x64;"
#if USE_VISUAL2017_NATIVE_ENVIRONMENT
        + "$MSVC2017BinPath$/HostX64/x86;"
#endif
        + .PATH

.MSVC2017BasePath =
[
    .LocalisationUID    = '$VS141CLUID$' ; code zone pour le language (EN)
    Print( "Using Visual 2017 with localisation uid $LocalisationUID$" )
    .VSBasePath         = '$VS141COMNTOOLS$../..'
    .VSToolsVersion     = '$VS141VERSION$'
    Print( "Using Visual 2017 with tools version $VSToolsVersion$" )
    .WindowsSDKBasePath = .WindowsSDKBasePath10
    .WindowsSDKVersion  = .WindowsSDKVersion10
    Print( "Using Visual 2017 with Windows 10 SDK $WindowsSDKVersion10$" )
]

Print( "Using Visual 2017 with platform toolset $MSVC2017PlatformToolset$" )

//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x86)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x86' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$/HostX86/x86'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles =
    {
        '$Root$/$LocalisationUID$/clui.dll',
        '$Root$/c1.dll',
        '$Root$/c1xx.dll',
        '$Root$/c2.dll',
        '$Root$/msobj140.dll',
        '$Root$/mspdb140.dll',
        '$Root$/mspdbcore.dll',
        '$Root$/mspdbst.dll',
        '$Root$/mspdbsrv.exe',
        '$Root$/mspft140.dll',
        '$Root$/msvcdis140.dll',
    }
}

//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x64)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x64' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$/HostX64/x64'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles =
    {
        '$Root$/$LocalisationUID$/clui.dll',
        '$Root$/c1.dll',
        '$Root$/c1xx.dll',
        '$Root$/c2.dll',
        '$Root$/msobj140.dll',
        '$Root$/mspdb140.dll',
        '$Root$/mspdbcore.dll',
        '$Root$/mspdbst.dll',
        '$Root$/mspdbsrv.exe',
        '$Root$/mspft140.dll',
        '$Root$/msvcdis140.dll',
    }
}

#if USE_VISUAL2017_NATIVE_ENVIRONMENT
//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x64 cross compiler for x86)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x64_x86' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$/HostX64/x86'
    .RootX86    = '$MSVC2017BinPath$/HostX86/x86'
    .Executable = '$Root$/cl.exe'
    .ExtraFiles =
    {
        '$Root$/$LocalisationUID$/clui.dll'
        '$Root$/c1.dll'
        '$Root$/c1xx.dll',
        '$Root$/c2.dll',
        '$RootX86$/msobj140.dll',
        '$RootX86$/mspdb140.dll',
        '$RootX86$/mspdbcore.dll',
        '$RootX86$/mspdbst.dll',
        '$RootX86$/mspdbsrv.exe',
        '$RootX86$/mspft140.dll',
        '$RootX86$/msvcdis140.dll',
    }
}
#endif

//------------------------------------------------------------------------------
// Resource Compiler
//------------------------------------------------------------------------------
.MSVC2017ResourceCompiler =
[
    Using( .MSVC2017BasePath )

    .Compiler                   = '$WindowsSDKBasePath$/Bin/$WindowsSDKVersion$/x64/RC.exe'
    .CompilerOutputExtension    = '.res'
    .CompilerOptions            = '/nologo /fo"%2" %1'
]

//------------------------------------------------------------------------------
// Pre-Compiled Headers Configurations
//------------------------------------------------------------------------------

.MSVC2017PCHEnabled     = .MSVCBasePCHEnabled
.MSVC2017PCHDisabled    = .MSVCBasePCHDisabled

//------------------------------------------------------------------------------
// Base Config
//------------------------------------------------------------------------------
.MSVC2017BaseConfig =
[
    Using( .MSVC2017BasePath )

    .Defines = {}
#if USE_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
//  Error	C4996	'std::iterator<_Category,_Ty,_Diff,_Pointer,_Reference>::pointer':
//  warning STL4015 : The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.
//  (The <iterator> header is NOT deprecated.) The C++ Standard has never required user - defined iterators to derive from std::iterator.
//  To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference.Note that value_type is required to be non - const, even for constant iterators.
//  You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
    Print( "Silencing C++17 depreciation warning for std::iterator<>" )
    .Defines + '_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING'
#endif
#if USE_VISUAL2017_EXTENDED_ALIGNED_STORAGE
//  You've instantiated std::aligned_storage<Len, Align> with an extended alignment (in other
//  words, Align > alignof(max_align_t)). Before VS 2017 15.8, the member type would
//  non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to
//  handle this correctly, but the fix inherently changes layout and breaks binary compatibility
//  (*only* for uses of aligned_storage with extended alignments).
//  Please define either
//  (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand this message and
//  that you actually want a type with an extended alignment, or
//  (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence this message and get the old non-conformant
//  behavior.
    Print( "Using Visual 2017 extended aligned storage added in 15.8.0" )
    .Defines + '_ENABLE_EXTENDED_ALIGNED_STORAGE'
#endif

    .ExecutableOptions = ''
    .ExecutableDeps = {}

    .CompilerOptions = ''
    + ' /Zo'                    ; https://msdn.microsoft.com/fr-fr/library/dn785163.aspx
    + ' /diagnostics:caret'     ; https://docs.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options

    .AdditionalOptions = ''
    + ' /Zc:inline'             ; https://msdn.microsoft.com/fr-fr/library/dn642448.aspx
    + ' /Zc:implicitNoexcept'   ; https://msdn.microsoft.com/fr-fr/library/dn818588.aspx
    + ' /Zc:rvalueCast'         ; https://msdn.microsoft.com/fr-fr/library/dn449507.aspx
    + ' /Zc:strictStrings'      ; https://msdn.microsoft.com/fr-fr/library/dn449508.aspx

#if USE_VISUAL2017_DIAGNOSTIC_IMPROVEMENTS
    ; https://blogs.msdn.microsoft.com/vcblog/2017/07/21/diagnostic-improvements-in-vs2017-15-3-0/
    Print( "Using Visual 2017 diagnostic improvements added in 15.3.0" )
    .AdditionalOptions + ' /w15038' ; Order of Members Initialization
                       + ' /permissive-' ; https://docs.microsoft.com/en-us/cpp/build/reference/permissive-standards-conformance
#endif
#if USE_VISUAL2017_UT8_CHARSET
    Print( "Using Visual 2017 with utf-8 as defaut source and execution charset" )
    .AdditionalOptions + ' /utf-8'; https://docs.microsoft.com/fr-fr/cpp/build/reference/utf-8-set-source-and-executable-character-sets-to-utf-8
#endif
#if USE_VISUAL2017_STD_2014
    Print( "Using Visual 2017 with C++14 standard" )
    .AdditionalOptions + ' /std:c++14' ; https://docs.microsoft.com/fr-fr/cpp/build/reference/std-specify-language-standard-version
#endif
#if USE_VISUAL2017_STD_2017
    Print( "Using Visual 2017 with C++17 standard" )
    .AdditionalOptions + ' /std:c++17' ; https://docs.microsoft.com/fr-fr/cpp/build/reference/std-specify-language-standard-version
#endif
#if USE_VISUAL2017_STD_LATEST
    Print( "Using Visual 2017 with latest C++ standard (>= C++17)" )
    .AdditionalOptions + ' /std:c++latest' ; https://docs.microsoft.com/fr-fr/cpp/build/reference/std-specify-language-standard-version
#endif
#if USE_VISUAL2017_EXTERNAL_ANGLEBRACKETS
    Print( "Using Visual 2017 experimental external angle brackets (/W0)" )
    .AdditionalOptions + ' /experimental:external /external:anglebrackets /external:W0' ; https://blogs.msdn.microsoft.com/vcblog/2017/12/13/broken-warnings-theory/
    .Defines + { 'USE_PPE_MSVC_PRAGMA_SYSTEMHEADER' }
#endif

    .CompilerOptions + .AdditionalOptions

    .LinkerOptions = ''
    + ' /CGTHREADS:8'            ; https://msdn.microsoft.com/fr-fr/library/dn631956.aspx

#if USE_VISUAL2017_LINK_NATVIS
    .NatvisSource  = '$SolutionPath$/Extras/Debug/PPE.natvis'
    Print( "Using Visual 2017 link with natvis file : '$NatvisSource$'")
    .ExecutableOptions + ' /NATVIS:"$NatvisSource$"'
    .ExecutableDeps + .NatvisSource
#endif

    .SystemIncludePaths =
    {
        '$VSBasePath$/VC/Tools/MSVC/$VSToolsVersion$/include',
        '$VSBasePath$/VC/Auxiliary/VS/include',
        '$WindowsSDKBasePath$/Include/$WindowsSDKVersion$/ucrt',
        '$WindowsSDKBasePath$/Include/$WindowsSDKVersion$/um',
        '$WindowsSDKBasePath$/Include/$WindowsSDKVersion$/shared',
    }
]

.MSVC2017DebugFastLink =
[
#if USE_VISUAL2017_DEBUG_FASTLINK
    Print( "Using Visual 2017 debug fast link : pdb references built objs" )
    ; utilise un lien symbolique vers les obj plutot que de les copier dans le pdb
    .LinkerOptions      = ' /DEBUG:FASTLINK'
#endif
]

.MSVC2017LinkTimeCodeGenerationIncremental =
[
    ; Link Time Code Generation (LTCG) incrémental pour accélérer les builds en FINAL
    .LinkerOptions      = ''
#if USE_LTCG_INCREMENTAL_LINKER_IN_PROFILING
    Print( "Using Visual 2017 incremental LTCG for profiling (/LTCG:incremental)" )
    .LinkerOptions      = ' /LTCG:INCREMENTAL'
#endif
]

.MSVC2017GenerateProfilingInfos =
[
    .LinkerOptions      = ' /PROFILE'
]

#if USE_LTCG_INCREMENTAL_LINKER_IN_PROFILING
Print( "Using Visual 2017 incremental LTCG for profiling : no profiling informations" )
.MSVC2017GenerateProfilingInfos = [] ; /PROFILE silently disable the incremental linker
#endif

.MSVC2017GuardCF =
[
#if USE_VISUAL2017_GUARD_CF
    Print( "Using Visual 2017 guard CF : control flow protection" )
    ; https://docs.microsoft.com/fr-fr/cpp/build/reference/guard-enable-guard-checks?view=vs-2017
    .CompilerOptions    = ' /guard:cf'
    .LinkerOptions      = ' /guard:cf /DYNAMICBASE'
#endif
]

.MSVC2017ReportClassLayoutChanges =
[
#if USE_VISUAL2017_EBCO_REPORT
    Print( "Using Visual 2017 empty base class optimizations report" )
    ; https://blogs.msdn.microsoft.com/vcblog/2016/03/30/optimizing-the-layout-of-empty-base-classes-in-vs2015-update-2-3/
    .CompilerOptions    = ' /d1reportClassLayoutChanges'
#endif
]
.MSVC2017BaseConfig + .MSVC2017ReportClassLayoutChanges

//------------------------------------------------------------------------------
// Platforms
//------------------------------------------------------------------------------
.MSVC2017PlatformX86 =
[
    Using( .MSVC2017BaseConfig )

    .Compiler           = 'Compiler-MSVC2017-x86'
    .ToolsBasePath      = '$MSVC2017BinPath$/HostX86/x86'

#if USE_VISUAL2017_NATIVE_ENVIRONMENT
    Print( "Using Visual 2017 native environment : cross compile x86 from x64" )
    .Compiler           = 'Compiler-MSVC2017-x64_x86'
    .ToolsBasePath      = '$MSVC2017BinPath$/HostX64/x86'
#endif

    .Librarian          = '$ToolsBasePath$/lib.exe'
    .Linker             = '$ToolsBasePath$/link.exe'

    .CompilerOptions    + ' /arch:SSE2' ; active le support SSE2 sur x86

    .LinkerOptions      + ' /LIBPATH:"$VSBasePath$/VC/Tools/MSVC/$VSToolsVersion$/lib/x86"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$/Lib/$WindowsSDKVersion$/ucrt/x86"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$/Lib/$WindowsSDKVersion$/um/x86"'
                        + ' /LIBPATH:"$VSBasePath$/VC/Auxiliary/VS/lib/x86"'
]
.MSVC2017PlatformX86 + .MSVCBasePlatformX86

.MSVC2017PlatformX64 =
[
    Using( .MSVC2017BaseConfig )

    .Compiler           = 'Compiler-MSVC2017-x64'
    .ToolsBasePath      = '$MSVC2017BinPath$/HostX64/x64'

    .Librarian          = '$ToolsBasePath$/lib.exe'
    .Linker             = '$ToolsBasePath$/link.exe'

    .CompilerOptions    + ' /arch:$CPU_AVX$' ; active le support AVX2 sur x64

    .LinkerOptions      + ' /LIBPATH:"$VSBasePath$/VC/Tools/MSVC/$VSToolsVersion$/lib/x64"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$/Lib/$WindowsSDKVersion$/ucrt/x64"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$/Lib/$WindowsSDKVersion$/um/x64"'
                        + ' /LIBPATH:"$VSBasePath$/VC/Auxiliary/VS/lib/x64"'
]
.MSVC2017PlatformX64 + .MSVCBasePlatformX64

//------------------------------------------------------------------------------
// Configurations
//------------------------------------------------------------------------------

.MSVC2017_X86Debug      = .MSVC2017PlatformX86   + .MSVCBaseDebugConfig          + .MSVC2017DebugFastLink
.MSVC2017_X86FastDebug  = .MSVC2017PlatformX86   + .MSVCBaseFastDebugConfig      + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X86Release    = .MSVC2017PlatformX86   + .MSVCBaseReleaseConfig        + .MSVC2017DebugFastLink
.MSVC2017_X86Profiling  = .MSVC2017PlatformX86   + .MSVCBaseProfilingConfig      + .MSVC2017LinkTimeCodeGenerationIncremental + .MSVC2017GenerateProfilingInfos
.MSVC2017_X86Final      = .MSVC2017PlatformX86   + .MSVCBaseFinalConfig          + .MSVC2017LinkTimeCodeGenerationIncremental

.MSVC2017_X64Debug      = .MSVC2017PlatformX64   + .MSVCBaseDebugConfig          + .MSVC2017DebugFastLink
.MSVC2017_X64FastDebug  = .MSVC2017PlatformX64   + .MSVCBaseFastDebugConfig      + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X64Release    = .MSVC2017PlatformX64   + .MSVCBaseReleaseConfig        + .MSVC2017DebugFastLink
.MSVC2017_X64Profiling  = .MSVC2017PlatformX64   + .MSVCBaseProfilingConfig      + .MSVC2017LinkTimeCodeGenerationIncremental + .MSVC2017GenerateProfilingInfos
.MSVC2017_X64Final      = .MSVC2017PlatformX64   + .MSVCBaseFinalConfig          + .MSVC2017LinkTimeCodeGenerationIncremental

.MSVC2017CompileConfigs =
{
    // X86
    .MSVC2017_X86Debug,
    .MSVC2017_X86FastDebug,
    .MSVC2017_X86Release,
    .MSVC2017_X86Profiling,
    .MSVC2017_X86Final,

    // X64
    .MSVC2017_X64Debug,
    .MSVC2017_X64FastDebug,
    .MSVC2017_X64Release,
    .MSVC2017_X64Profiling,
    .MSVC2017_X64Final,
}
