#once

; __      ___                 _   ___   ___  __ ______
; \ \    / (_)               | | |__ \ / _ \/_ |____  |
;  \ \  / / _ ___ _   _  __ _| |    ) | | | || |   / /
;   \ \/ / | / __| | | |/ _` | |   / /| | | || |  / /
;    \  /  | \__ \ |_| | (_| | |  / /_| |_| || | / /
;     \/   |_|___/\__,_|\__,_|_| |____|\___/ |_|/_/
;

; utilise la toolchain 64 bits pour compiler en 32
#define USE_VISUAL2017_NATIVE_ENVIRONMENT
; 2X Faster Links, mais TODO: les versions ne doivent pas utiliser ça
#define USE_VISUAL2017_DEBUG_FASTLINK
; activer la protection du flux de controle
#define USE_VISUAL2017_GUARD_CF
; affiche a rapport avec les EBCO (Empty Base Class Optimizations) possibles (à utiliser avec -buildlog)
;#define USE_VISUAL2017_EBCO_REPORT
; active l'utilisation des Pre-Compiled Headers (/Yu, /Yc)
#define USE_PRECOMPILED_HEADERS
; utilise les .obj plutôt que les .lib comme input du linker (encore nécessaire ?)
;#define USE_LIBRARY_DEPENDENCY_INPUT
; utilise le linker incremental en profiling
#define USE_LTCG_INCREMENTAL_LINKER_IN_PROFILING

#include "MSVCBase.bff"

//------------------------------------------------------------------------------
// Global Properties
//------------------------------------------------------------------------------

.MSVC2017PlatformToolset = 'v141'

; VS141COMNTOOLS ou VS150COMNTOOLS n'est plus défini par Visual 2017 ...
; https://stackoverflow.com/questions/42713238/reliable-way-to-find-the-location-devenv-exe-of-visual-studio-2017
; #import VS141COMNTOOLS
.MSVC2017BinPath = "$VS141COMNTOOLS$..\..\VC\Tools\MSVC\$VS141VERSION$\bin"
Print( "Using Visual 2017 installation found in '$MSVC2017BinPath$'" )

.PATH   = "$VS141COMNTOOLS$..\IDE;"
        + "$MSVC2017BinPath$\HostX86\x86;"
        + "$MSVC2017BinPath$\HostX64\x64;"
#if USE_VISUAL2017_NATIVE_ENVIRONMENT
        + "$MSVC2017BinPath$\HostX64\x86;"
#endif
        + .PATH

.MSVC2017BasePath =
[
    .LocalisationUID    = '$VS141CLUID$' ; code zone pour le language (EN)
    Print( "Using Visual 2017 with localisation uid $LocalisationUID$" )
    .VSBasePath         = '$VS141COMNTOOLS$..\..'
    .VSToolsVersion     = '$VS141VERSION$'
    Print( "Using Visual 2017 with tools version $VSToolsVersion$" )
    .WindowsSDKBasePath = .WindowsSDKBasePath10
    .WindowsSDKVersion  = .WindowsSDKVersion10
    Print( "Using Visual 2017 with Windows 10 SDK $WindowsSDKVersion10$" )
]

Print( "Using Visual 2017 with platform toolset $MSVC2017PlatformToolset$" )

//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x86)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x86' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$\HostX86\x86'
    .Executable = '$Root$\cl.exe'
    .ExtraFiles =
    {
        '$Root$\$LocalisationUID$\clui.dll',
        '$Root$\c1.dll',
        '$Root$\c1xx.dll',
        '$Root$\c2.dll',
        '$Root$\msobj140.dll',
        '$Root$\mspdb140.dll',
        '$Root$\mspdbcore.dll',
        '$Root$\mspdbst.dll',
        '$Root$\mspdbsrv.exe',
        '$Root$\mspft140.dll',
        '$Root$\msvcdis140.dll',
    }
}

//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x64)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x64' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$\HostX64\x64'
    .Executable = '$Root$\cl.exe'
    .ExtraFiles =
    {
        '$Root$\$LocalisationUID$\clui.dll',
        '$Root$\c1.dll',
        '$Root$\c1xx.dll',
        '$Root$\c2.dll',
        '$Root$\msobj140.dll',
        '$Root$\mspdb140.dll',
        '$Root$\mspdbcore.dll',
        '$Root$\mspdbst.dll',
        '$Root$\mspdbsrv.exe',
        '$Root$\mspft140.dll',
        '$Root$\msvcdis140.dll',
    }
}

#if USE_VISUAL2017_NATIVE_ENVIRONMENT
//------------------------------------------------------------------------------
// Microsoft Visual Studio 2017 (x64 cross compiler for x86)
//------------------------------------------------------------------------------
Compiler( 'Compiler-MSVC2017-x64_x86' )
{
    Using( .MSVC2017BasePath )

    .Root       = '$MSVC2017BinPath$\HostX64\x86'
    .RootX86    = '$MSVC2017BinPath$\HostX86\x86'
    .Executable = '$Root$\cl.exe'
    .ExtraFiles =
    {
        '$Root$\$LocalisationUID$\clui.dll'
        '$Root$\c1.dll'
        '$Root$\c1xx.dll',
        '$Root$\c2.dll',
        '$RootX86$\msobj140.dll',
        '$RootX86$\mspdb140.dll',
        '$RootX86$\mspdbcore.dll',
        '$RootX86$\mspdbst.dll',
        '$RootX86$\mspdbsrv.exe',
        '$RootX86$\mspft140.dll',
        '$RootX86$\msvcdis140.dll',
    }
}
#endif

//------------------------------------------------------------------------------
// Resource Compiler
//------------------------------------------------------------------------------
.MSVC2017ResourceCompiler =
[
    Using( .MSVC2017BasePath )

    .Compiler                   = '$WindowsSDKBasePath$\Bin\$WindowsSDKVersion$\x86\RC.exe'
    .CompilerOutputExtension    = '.res'
    .CompilerOptions            = '/nologo /fo"%2" %1'
]

//------------------------------------------------------------------------------
// Pre-Compiled Headers Configurations
//------------------------------------------------------------------------------

.MSVC2017PCHEnabled     = .MSVCBasePCHEnabled
.MSVC2017PCHDisabled    = .MSVCBasePCHDisabled

//------------------------------------------------------------------------------
// Base Config
//------------------------------------------------------------------------------
.MSVC2017BaseConfig =
[
    Using( .MSVC2017BasePath )

    .Defines = {}
    .CompilerOptions = ''
    + ' /Zo'                    ; https://msdn.microsoft.com/fr-fr/library/dn785163.aspx
    + ' /Zc:inline'             ; https://msdn.microsoft.com/fr-fr/library/dn642448.aspx
    + ' /Zc:implicitNoexcept'   ; https://msdn.microsoft.com/fr-fr/library/dn818588.aspx
    + ' /Zc:rvalueCast'         ; https://msdn.microsoft.com/fr-fr/library/dn449507.aspx
    + ' /Zc:strictStrings'      ; https://msdn.microsoft.com/fr-fr/library/dn449508.aspx
    + ' /diagnostics:caret'     ; https://docs.microsoft.com/en-us/cpp/build/reference/diagnostics-compiler-diagnostic-options
    + ' /arch:AVX'              ; active le support AVX

    .LinkerOptions = ''
    + ' /CGTHREADS8'            ; https://msdn.microsoft.com/fr-fr/library/dn631956.aspx

    .IncludePaths =
    {
        '$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\include',
        '$VSBasePath$\VC\Auxiliary\VS\include',
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\ucrt',
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\um',
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\shared',
    }
]

.MSVC2017DebugFastLink =
[
#if USE_VISUAL2017_DEBUG_FASTLINK
    Print( "Using Visual 2017 debug fast link : pdb references built objs" )
    ; utilise un lien symbolique vers les obj plutot que de les copier dans le pdb
    .LinkerOptions      = ' /DEBUG:FASTLINK'
#endif
]

.MSVC2017LinkTimeCodeGenerationIncremental =
[
    ; Link Time Code Generation (LTCG) incrémental pour accélérer les builds en FINAL
    .LinkerOptions      = ' /LTCG:incremental'
    .LibrarianOptions   = ' /LTCG'
]

.MSVC2017GenerateProfilingInfos =
[
    .LinkerOptions      = ' /PROFILE'
]

#if USE_LTCG_INCREMENTAL_LINKER_IN_PROFILING
Print( "Using Visual 2017 incremental LTCG for profiling : no profiling informations" )
.MSVC2017GenerateProfilingInfos = [] ; /PROFILE silently disable the incremental linker
#endif

.MSVC2017GuardCF =
[
#if USE_VISUAL2017_GUARD_CF
    Print( "Using Visual 2017 guard CF : control flow protection" )
    ; https://msdn.microsoft.com/fr-fr/library/dn919635.aspx
    .CompilerOptions    = ' /guard:cf'
#endif
]

.MSVC2017ReportClassLayoutChanges =
[
#if USE_VISUAL2017_EBCO_REPORT
    Print( "Using Visual 2017 empty base class optimizations report" )
    ; https://blogs.msdn.microsoft.com/vcblog/2016/03/30/optimizing-the-layout-of-empty-base-classes-in-vs2015-update-2-3/
    .CompilerOptions    = ' /d1reportClassLayoutChanges'
#endif
]
.MSVC2017BaseConfig + .MSVC2017ReportClassLayoutChanges

//------------------------------------------------------------------------------
// Platforms
//------------------------------------------------------------------------------
.MSVC2017PlatformX86 =
[
    Using( .MSVC2017BaseConfig )

    .Compiler           = 'Compiler-MSVC2017-x86'
    .ToolsBasePath      = '$MSVC2017BinPath$\HostX86\x86'

#if USE_VISUAL2017_NATIVE_ENVIRONMENT
    Print( "Using Visual 2017 native environment : cross compile x86 from x64" )
    .Compiler           = 'Compiler-MSVC2017-x64_x86'
    .ToolsBasePath      = '$MSVC2017BinPath$\HostX64\x86'
#endif

    .Librarian          = '$ToolsBasePath$\lib.exe'
    .Linker             = '$ToolsBasePath$\link.exe'

    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\lib\x86"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\ucrt\x86"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\um\x86"'
                        + ' /LIBPATH:"$VSBasePath$\VC\Auxiliary\VS\lib\x86"'
]
.MSVC2017PlatformX86 + .MSVCBasePlatformX86

.MSVC2017PlatformX64 =
[
    Using( .MSVC2017BaseConfig )

    .Compiler           = 'Compiler-MSVC2017-x64'
    .ToolsBasePath      = '$MSVC2017BinPath$\HostX64\x64'

    .Librarian          = '$ToolsBasePath$\lib.exe'
    .Linker             = '$ToolsBasePath$\link.exe'

    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\lib\x64"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\ucrt\x64"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\um\x64"'
                        + ' /LIBPATH:"$VSBasePath$\VC\Auxiliary\VS\lib\x64"'
]
.MSVC2017PlatformX64 + .MSVCBasePlatformX64

//------------------------------------------------------------------------------
// Configurations
//------------------------------------------------------------------------------

.MSVC2017_X86Debug      = .MSVC2017PlatformX86   + .MSVCBaseDebugConfig          + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X86FastDebug  = .MSVC2017PlatformX86   + .MSVCBaseFastDebugConfig      + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X86Release    = .MSVC2017PlatformX86   + .MSVCBaseReleaseConfig        + .MSVC2017DebugFastLink
.MSVC2017_X86Profiling  = .MSVC2017PlatformX86   + .MSVCBaseProfilingConfig      + .MSVC2017LinkTimeCodeGenerationIncremental + .MSVC2017GenerateProfilingInfos
.MSVC2017_X86Final      = .MSVC2017PlatformX86   + .MSVCBaseFinalConfig          + .MSVC2017LinkTimeCodeGenerationIncremental

.MSVC2017_X64Debug      = .MSVC2017PlatformX64   + .MSVCBaseDebugConfig          + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X64FastDebug  = .MSVC2017PlatformX64   + .MSVCBaseFastDebugConfig      + .MSVC2017DebugFastLink    + .MSVC2017GuardCF
.MSVC2017_X64Release    = .MSVC2017PlatformX64   + .MSVCBaseReleaseConfig        + .MSVC2017DebugFastLink
.MSVC2017_X64Profiling  = .MSVC2017PlatformX64   + .MSVCBaseProfilingConfig      + .MSVC2017LinkTimeCodeGenerationIncremental + .MSVC2017GenerateProfilingInfos
.MSVC2017_X64Final      = .MSVC2017PlatformX64   + .MSVCBaseFinalConfig          + .MSVC2017LinkTimeCodeGenerationIncremental

.MSVC2017CompileConfigs =
{
    // X86
    .MSVC2017_X86Debug,
    .MSVC2017_X86FastDebug,
    .MSVC2017_X86Release,
    .MSVC2017_X86Profiling,
    .MSVC2017_X86Final,

    // X64
    .MSVC2017_X64Debug,
    .MSVC2017_X64FastDebug,
    .MSVC2017_X64Release,
    .MSVC2017_X64Profiling,
    .MSVC2017_X64Final,
}
