#once

; The Visual C++ Linker best practices: Developer Iteration
; http://blogs.msdn.com/b/vcblog/archive/2015/10/30/the-visual-c-linker-best-practices-developer-iteration.aspx

; set les bonnes options pour tirer parti du cache
#define USE_FASTBUILD_CACHE
; active le debugging des iterator pour les containers de la STL
#define USE_STL_ITERATOR_DEBUGGING
; active l'utilisation des guardes de securité au runtime
#define USE_MSVC_RUNTIME_CHECKS
; active l'inlining simple en debug (/Ob1)
#define USE_INLINING_IN_DEBUG

//------------------------------------------------------------------------------
// Common MSVC Configuration
//------------------------------------------------------------------------------
.MSVCBase =
[
    .AdditionalWarnings = ''
    + ' /we4062' // enumerator 'identifier' in a switch of enum 'enumeration' is not handled
    + ' /we4263' // 'function' : member function does not override any base class virtual member function
    ;+ ' /we4265' // 'class': class has virtual functions, but destructor is not virtual // not handler by boost and stl
    + ' /we4296' // 'operator': expression is always false
    + ' /we4555' // expression has no effect; expected expression with side-effect
    + ' /we4619' // #pragma warning : there is no warning number 'number'
    + ' /we4640' // 'instance' : construction of local static object is not thread-safe
    + ' /we4826' // Conversion from 'type1 ' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
    + ' /we4836' // nonstandard extension used : 'type' : local types or unnamed types cannot be used as template arguments
    + ' /we4905' // wide string literal cast to 'LPSTR'
    + ' /we4906' // string literal cast to 'LPWSTR'

    .Defines =
    {
        "_MT", "_DLL",                  ; https://msdn.microsoft.com/fr-fr/library/abx4dbyh.aspx
        "STRICT",                       ; https://msdn.microsoft.com/en-us/library/windows/desktop/aa383681(v=vs.85).aspx
        "NOMINMAX",                     ; https://support.microsoft.com/en-us/kb/143208
        "VC_EXTRALEAN",                 ; https://support.microsoft.com/en-us/kb/166474
        "WIN32_LEAN_AND_MEAN",          ; https://support.microsoft.com/en-us/kb/166474
        "STRSAFE_NO_DEPRECATE=1",       ; https://msdn.microsoft.com/en-us/library/windows/desktop/ms647466(v=vs.85).aspx
        "_CRT_SECURE_NO_DEPRECATE=1",   ; https://msdn.microsoft.com/fr-fr/library/8ef0s5kh.aspx
        "_CRT_NONSTDC_NO_DEPRECATE=1",  ; https://msdn.microsoft.com/fr-fr/library/8ef0s5kh.aspx
        "DBGHELP_TRANSLATE_TCHAR",      ; https://msdn.microsoft.com/en-us/library/windows/desktop/ms679294(v=vs.85).aspx
        "_UNICODE", "UNICODE"           ; https://msdn.microsoft.com/fr-fr/library/dybsewaf.aspx
    }

    .IncludePaths = {}

    .CompilerOptions = ''
    + ' /nologo'            ; pas de message de copyright lors de la compilation
    + ' /W3 /WX-'           ; warning level 3, les warnings ne génèrent pas d'erreurs
    + ' /Gm-'               ; minimal rebuild est incompatible avec FastBuild qui gère cette feature lui même
    + ' /GR'                ; active le support des RTTI std de C++ (RunTime Type Information, nécessaire pour dynamic_cast<> par ex)
    + ' /GF'                ; fusion des chaînes de caractères identiques (string pooling)
    + ' /GT'                ; fiber safe optimizations (https://msdn.microsoft.com/fr-fr/library/6e298fy4.aspx)
    + ' /EHsc'              ; active le support des exceptions
    + ' /fp:precise'        ; opération virgule flottante précises, NECESSAIRE POUR LE DETERMINISME
    + ' /bigobj'            ; augmente le nombre des sections qu'un fichier objet peut contenir (les obj peuvent être plus gros)
    + ' /openmp-'           ; désactivation du support de openmp (parallèlisation automatique)
    + ' /Zc:wchar_t'        ; active le support de wchar_t comme type natif
    + ' /Zc:forScope'       ; interdit d'acceder à l'iterateur d'un for en dehors de son scope (comportement std)
    + ' /errorreport:prompt'; affiche une boite de dialogue en cas de crash du compilo
    + ' /c "%1" /TP'

    .PreprocessorOptions = ''

    .CompilerOptions + .AdditionalWarnings

    .LibrarianOptions = ''
    + ' /WX'                ; considère les avertissements comme des erreurs
    + ' /nologo'            ; pas de message de copyright lors de la compilation
    + ' /errorreport:prompt'; affiche une boite de dialogue en cas de crash du compilo
    + ' /SUBSYSTEM:WINDOWS'
    + ' /IGNORE:4221'
    + ' /OUT:"%2" "%1"'

    .LinkerOptions = ''
    + ' /nologo'            ; pas de message de copyright lors de la compilation
    + ' /errorreport:prompt'; affiche une boite de dialogue en cas de crash du compilo
    + ' /LARGEADDRESSAWARE' ; l'application gère les adresses de taille supérieure à 2 gigaoctets
    + ' /TLBID:1'           ; https://msdn.microsoft.com/fr-fr/library/b1kw34cb.aspx
    + ' /DEBUG'             ; genère les infos de debug pour le binaire
    + ' /IGNORE:4001'       ; https://msdn.microsoft.com/en-us/library/aa234697(v=vs.60).aspx
    + ' /DYNAMICBASE:NO'    ; pas de randomisation des adresses
    + ' /NXCOMPAT:NO'       ; indique que le programme n'est pas compatible avec Data Execution Prevention
    + ' /STACK:4194304'     ; augmente la taille de la stack de chaque thread à 4mo
    + ' /LIBPATH:"$BinaryDirectory$"'
    + ' /SUBSYSTEM:WINDOWS'
    + ' /OUT:"%2" "%1"'
    + ' kernel32.lib'
    + ' User32.lib'
    + ' Shell32.lib'
    + ' Comctl32.lib'
    + ' Gdi32.lib'

    .DllOptions = ''
    + ' /DLL'               ; https://msdn.microsoft.com/en-us/library/527z7zfs.aspx

    .ExecutableOptions = ''
    + ' /ENTRY:"wWinMainCRTStartup"'

    ; utilisés pour généraliser les templates :
    .CompilerDefineFlag         = ' /D'
    .CompilerIncludeFlag        = ' /I'
    .CompilerPreprocessorFlag   = ' /P /Fi"%2"'
    .CompilerBinaryExtension    = 'exe'
    .CompilerDllExtension       = 'dll'
    .CompilerLibraryExtension   = 'lib'
]

//------------------------------------------------------------------------------
// MSVC Base Pre-Compiled Headers Configurations
//------------------------------------------------------------------------------

.MSVCBasePCHDisabled    =
[
    .CompilerOptions    = ' /Fo"%2"'
]
.MSVCBasePCHEnabled     = .MSVCBasePCHDisabled

#if USE_PRECOMPILED_HEADERS
Print( 'Using Pre-Compiled Headers (/Yc, /Yu, /Fp)' )
.MSVCBasePCHEnabled =
[
    .UnityPCH           = '^$ProjectPCHName^$.h'
    .PCHOptions         = ' /Fp"%2" /Fo"%3"'
                        + ' /Yc"^$ProjectPCHName^$.h"'
                        + '^$CompilerOptions^$'
    .PCHInputFile       = '^$ProjectPath^$\^$ProjectPCHName^$.cpp'
    .PCHOutputFile      = '^$IntermediateDirectory^$\^$ProjectPCHName^$.pch'
    .CompilerOptions    = ' /Yu"^$ProjectPCHName^$.h" /Fp"$PCHOutputFile$"'
                        + ' /Fo"%2"'
]
#endif

//------------------------------------------------------------------------------
// MSVC Base Platforms
//------------------------------------------------------------------------------
.MSVCBasePlatformWin32 =
[
    Using( .SharedPlatformWin32 )
    Using( .MSVCBase )

    .Defines            + .PlatformDefines

    .PlatformOptions    = ' /favor:blend'   ; https://msdn.microsoft.com/fr-fr/library/ms173505(v=vs.110).aspx
                        + ' /Zm500'         ; precompiled header size limit

    .CompilerOptions    + .PlatformOptions

    .LibrarianOptions   + ' /MACHINE:X86'
    .LinkerOptions      + ' /MACHINE:X86'
    + ' /SAFESEH'                           ; image dotée de gestionnaires d'exceptions sécurisés
    + ' /LIBPATH:"$BinaryDirectory$"'
]

.MSVCBasePlatformX64 =
[
    Using( .SharedPlatformX64 )
    Using( .MSVCBase )

    .Defines            + .PlatformDefines

    .PlatformOptions    = ' /favor:AMD64'   ; https://msdn.microsoft.com/fr-fr/library/ms173505(v=vs.110).aspx
                        + ' /Zm1000'        ; precompiled header size limit

    .CompilerOptions    + .PlatformOptions

    .LibrarianOptions   + ' /MACHINE:X64'
    .LinkerOptions      + ' /MACHINE:X64'
    + ' /LIBPATH:"$BinaryDirectory$"'
]

//------------------------------------------------------------------------------
// MSVC Config Dependent Flags
//------------------------------------------------------------------------------
.MSVCBaseConfig =
[
    .WithSTLIteratorDebuggingDefines =
    {
        "_SECURE_SCL=1",                 ; https://msdn.microsoft.com/fr-fr/library/aa985896.aspx
        "_ITERATOR_DEBUG_LEVEL=2",       ; https://msdn.microsoft.com/fr-fr/library/hh697468.aspx
        "_HAS_ITERATOR_DEBUGGING=1",     ; https://msdn.microsoft.com/fr-fr/library/aa985939.aspx
    }

    .WoutSTLIteratorDebuggingDefines =
    {
        "_SECURE_SCL=0",                 ; https://msdn.microsoft.com/fr-fr/library/aa985896.aspx
        "_ITERATOR_DEBUG_LEVEL=0",       ; https://msdn.microsoft.com/fr-fr/library/hh697468.aspx
        "_HAS_ITERATOR_DEBUGGING=0",     ; https://msdn.microsoft.com/fr-fr/library/aa985939.aspx
    }

    .DebugDefines   = .WoutSTLIteratorDebuggingDefines
#if USE_STL_ITERATOR_DEBUGGING
    Print( "Using STL iterator debugging : _SECURE_SCL=1, _HAS_ITERATOR_DEBUGGING=1, _ITERATOR_DEBUG_LEVEL=2" )
    .DebugDefines   = .WithSTLIteratorDebuggingDefines
#endif
    .ReleaseDefines = .WoutSTLIteratorDebuggingDefines

    .DebugOptimisations = ''
    + ' /MDd'               ; MultiThreaded Debug dll
    + ' /Od'                ; désactive les optimisations (debug)
    + ' /Oy-'               ; n'empêche pas la création des pointeurs de frame sur la pile des appels
    + ' /Gw-'               ; pas d'optimisations des données globales
#if USE_MSVC_RUNTIME_CHECKS
    .DebugOptimisations
    + ' /GS'                ; vérification de la sécurité de la mémoire tampon
    + ' /sdl'               ; Security Development Lifecycle checks (https://msdn.microsoft.com/fr-fr/library/jj161081(v=vs.140).aspx)
    + ' /RTC1'              ; vérifications des erreurs au moment de l'exécution (https://msdn.microsoft.com/fr-fr/library/8wtf2dfz.aspx) ; coute trop cher
    Print( "Using MSVC runtime security checks : /GS, /sdl, /RTC1" )
#endif
#if USE_INLINING_IN_DEBUG
    .DebugOptimisations
    + ' /Ob1'               ; active l'inlinling pour garder des perfs correctes et linker plus vite
    Print( "Using inlining in debug : /Ob1" )
#endif

    .FastDebugOptimisations = ''
    + ' /MDd'               ; MultiThreaded Debug dll
    + ' /O2'                ; optimisations favorisant la vitesse
    + ' /Ot'                ; favorise le code rapide (pas la taille)
    + ' /Oi'                ; active les fonctions intrinsics
    + ' /Oy-'               ; n'empêche pas la création des pointeurs de frame sur la pile des appels
    + ' /GS-'               ; vérification de la sécurité de la mémoire tampon
    + ' /Gw-'               ; pas d'optimisations des données globales

    .ReleaseOptimisations = ''
    + ' /MD'                ; MultiThreaded dll
    + ' /O2'                ; optimisations favorisant la vitesse
    + ' /Ot'                ; favorise le code rapide (pas la taille)
    + ' /Oi'                ; active les fonctions intrinsics
    + ' /Oy-'               ; n'empêche pas la création des pointeurs de frame sur la pile des appels
    + ' /GS-'               ; vérification de la sécurité de la mémoire tampon

    .FinalOptimisations = ''
    + ' /MD'                ; MultiThreaded dll
    + ' /Ox'                ; optimisations complète
    + ' /Ot'                ; favorise le code rapide (pas la taille)
    + ' /Oi'                ; active les fonctions intrinsics
    + ' /Oy'                ; empêche la création des pointeurs de frame sur la pile des appels
    + ' /GS-'               ; vérification de la sécurité de la mémoire tampon
    + ' /Gw'                ; optimisations des données globales
    + ' /GL'                ; optimisations du programme globales

    ; FastBuild n'utilise le cache qu'en Z7
    .CompilerWithoutCache       = ' /Zi' ; produit une base de données de programme (PDB)
    .CompilerWithCache          = .CompilerWithoutCache

#if !USE_CLANG_WINDOWS
#if USE_FASTBUILD_CACHE
    Print( "Using FBuild cache : compiling with /Z7 instead of /Zi" )
    .CompilerWithCache          = ' /Z7' ; Produit un fichier .obj contenant des informations de débogage complètes
#endif
#endif

    .LibraryLinkType = 'Lib'
#if USE_LIBRARY_DEPENDENCY_INPUT
    .LibraryLinkType = 'Obj'
    Print( "Using library dependency input" )
#endif
]

//------------------------------------------------------------------------------
// MSVC Debug Configuration
//------------------------------------------------------------------------------
.MSVCBaseDebugConfig =
[
    Using( .SharedDebugConfig )
    Using( .MSVCBaseConfig )

    .ConfigLinkType     = .LibraryLinkType

    .ConfigOptions      = .DebugOptimisations
                        + .CompilerWithCache

    .Defines            = .ConfigDefines
                        + .DebugDefines

    .CompilerOptions    = .ConfigOptions

    .LinkerOptions      = ' /INCREMENTAL'   ; active le linker incrémental
]

//------------------------------------------------------------------------------
// MSVC FastDebug Configuration
//------------------------------------------------------------------------------
.MSVCBaseFastDebugConfig =
[
    Using( .SharedFastDebugConfig )
    Using( .MSVCBaseConfig )

    .ConfigOptions      = .FastDebugOptimisations
                        + .CompilerWithCache

    .Defines            = .ConfigDefines
                        + .DebugDefines

    .CompilerOptions    = .ConfigOptions

    .LinkerOptions      = ' /INCREMENTAL'   ; active le linker incrémental
]

//------------------------------------------------------------------------------
// MSVC Release Configuration
//------------------------------------------------------------------------------
.MSVCBaseReleaseConfig =
[
    Using( .SharedReleaseConfig )
    Using( .MSVCBaseConfig )

    .ConfigLinkType     = .LibraryLinkType

    .ConfigOptions      = .ReleaseOptimisations
                        + .CompilerWithCache

    .Defines            = .ConfigDefines
                        + .ReleaseDefines

    .CompilerOptions    = .ConfigOptions

    .LinkerOptions      = ' /INCREMENTAL'   ; active le linker incrémental
]

//------------------------------------------------------------------------------
// MSVC Profiling Configuration
//------------------------------------------------------------------------------
.MSVCBaseProfilingConfig =
[
    Using( .SharedProfilingConfig )
    Using( .MSVCBaseConfig )

    .ConfigLinkType     = .LibraryLinkType

    .ConfigOptions      = .FinalOptimisations
                        + .CompilerWithCache

    .Defines            = .ConfigDefines
                        + .ReleaseDefines

    .CompilerOptions    = .ConfigOptions

    .LibrarianOptions   = ' /LTCG'          ; link time code generation

    .LinkerOptions      = ' /LTCG'          ; link time code generation
                        + ' /PROFILE'       ; Produit un fichier de sortie utilisable avec le profileur Outils d'analyse des performances.
]

//------------------------------------------------------------------------------
// MSVC Final Configuration
//------------------------------------------------------------------------------
.MSVCBaseFinalConfig =
[
    Using( .SharedFinalConfig )
    Using( .MSVCBaseConfig )

    .ConfigLinkType     = .LibraryLinkType

    .ConfigOptions      = .FinalOptimisations
                        + .CompilerWithoutCache

    .Defines            = .ConfigDefines
                        + .ReleaseDefines

    .CompilerOptions    = .FinalOptimisations

    .LibrarianOptions   = ' /LTCG'          ; link time code generation

    .LinkerOptions      = ' /LTCG'          ; link time code generation
                        + ' /OPT:REF'       ; supprime le code non référencé
                        + ' /OPT:ICF=4'     ; COMDAT folding (4 itérations)
]
