#once

;   _____ _
;  / ____| |
; | |    | |     __ _ _ __   __ _
; | |    | |    / _` | '_ \ / _` |
; | |____| |___| (_| | | | | (_| |
;  \_____|______\__,_|_| |_|\__, |
;                            __/
;                           |___/

#include "CLangWindowsBase.bff"

; active l'utilisation des Pre-Compiled Headers (/Yu, /Yc
#define USE_PRECOMPILED_HEADER
; utilise les .obj plutôt que les .lib comme input du link
#define USE_LIBRARY_DEPENDENCY_INPU
; choix entre la version 32-bit ou 64-bit de LLV
#define USE_LLVM_LATEST_X64
; active l'utilisation de adress sanitizer
;#define USE_LLVM_ADRESS_SANITIZER
//------------------------------------------------------------------------------
// Global Properties
//------------------------------------------------------------------------------

#if WITH_VISUALSTUDIO_TOOLSET_140
#import VS140COMNTOOLS
.CLangWindowsLatestPlatformToolset = 'v140'
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
//#import VS141COMNTOOLS ; TODO
.CLangWindowsLatestPlatformToolset = 'v141'
#endif
Print( "Using CLang latest  with platform toolset $CLangWindowsLatestPlatformToolset$" )

.CLangWindowsLatestBasePath =
[
#if WITH_LLVMFORWINDOWS_X86
    .LLVMBasePath         = '$LLVMBasePathX86$'
#endif
#if WITH_LLVMFORWINDOWS_X64
#   if USE_LLVM_LATEST_X64
    Print( "Using CLang latest 64-bit version" )
    .LLVMBasePath         = '$LLVMBasePathX64$'
#   endif
#endif
    Print( "Using CLang latest  installed in $LLVMBasePath$" )
#if WITH_VISUALSTUDIO_TOOLSET_140
    .LocalisationUID      = '$VS140CLUID$'
    .VSBasePath           = '$VS140COMNTOOLS$..\..'
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
    .LocalisationUID      = '$VS141CLUID$'
    .VSBasePath           = '$VS141COMNTOOLS$..\..'
    .VSToolsVersion       = '$VS141VERSION$'
    Print( "Using CLang latest  with platform toolset 141 version $VSToolsVersion$" )
#endif
    Print( "Using CLang latest  with localisation uid $LocalisationUID$" )
    .WindowsSDKBasePath   = .WindowsSDKBasePath10
    .WindowsSDKVersion    = .WindowsSDKVersion10
    Print( "Using CLang latest  with Windows 10 SDK $WindowsSDKVersion10$" )
]

//------------------------------------------------------------------------------
// Windows LLVM CLang
//------------------------------------------------------------------------------
Compiler( 'Compiler-CLangWindowsLatest' )
{
    Using( .CLangWindowsLatestBasePath )

    .Root       = '$LLVMBasePath$\msbuild-bin'
    .Executable = '$Root$\cl.exe'
    .ExtraFiles = {}
}

//------------------------------------------------------------------------------
// Resource Compiler
//------------------------------------------------------------------------------
.CLangWindowsLatestResourceCompiler =
[
    Using( .CLangWindowsLatestBasePath )

    .Compiler                   = '$WindowsSDKBasePath$\Bin\$WindowsSDKVersion$\x64\RC.exe'
    .CompilerOutputExtension    = '.res'
    .CompilerOptions            = '/nologo /fo"%2" %1'
]

//------------------------------------------------------------------------------
// Pre-Compiled Headers Configurations
//------------------------------------------------------------------------------
.CLangWindowsLatestPCHEnabled   = .CLangWindowsBasePCHEnabled
.CLangWindowsLatestPCHDisabled  = .CLangWindowsBasePCHDisabled

//------------------------------------------------------------------------------
// Base Config
//------------------------------------------------------------------------------
.CLangWindowsLatestBaseConfig =
[
    Using( .CLangWindowsLatestBasePath )

    .Defines = {}

    // version reportée par CLANG pour les headers systèmes :
#if WITH_VISUALSTUDIO_TOOLSET_140
    .CompilerOptions  = ' -fmsc-version=1900'
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
    .CompilerOptions  = ' -fmsc-version=1910'
#endif
    .CompilerOptions  + ' -Xclang -std=c++17' // support for C++ 17
#if USE_LLVM_ADRESS_SANITIZER
    Print( "Using LLVM Address Sanitizer" )
    .CompilerOptions  + ' -fsanitize=address'
    .LinkerOptions    = ' -fsanitize=address'
#endif

#if WITH_VISUALSTUDIO_TOOLSET_140
    .SystemIncludePaths =
    {
        '$VSBasePath$\VC\Include',
    }
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
    .SystemIncludePaths =
    {
        '$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\include',
        '$VSBasePath$\VC\Auxiliary\VS\include',
    }
#endif
    .SystemIncludePaths +
    {
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\ucrt',
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\um',
        '$WindowsSDKBasePath$\Include\$WindowsSDKVersion$\shared',
    }
]

//------------------------------------------------------------------------------
// Platforms
//------------------------------------------------------------------------------
.CLangWindowsLatestPlatformX86 =
[
    Using( .CLangWindowsLatestBaseConfig )

    .Compiler           = 'Compiler-CLangWindowsLatest'
    .ToolsBasePath      = '$LLVMBasePath$\bin'
    .Librarian          = '$ToolsBasePath$\llvm-lib.exe'
    .Linker             = '$ToolsBasePath$\lld-link.exe'

#if WITH_VISUALSTUDIO_TOOLSET_140
    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\lib"'
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\lib\x86"'
                        + ' /LIBPATH:"$VSBasePath$\VC\Auxiliary\VS\lib\x86"'
#endif
    .LinkerOptions      + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\ucrt\x86"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\um\x86"'
]
.CLangWindowsLatestPlatformX86 + .CLangBasePlatformX86

.CLangWindowsLatestPlatformX64 =
[
    Using( .CLangWindowsLatestBaseConfig )

    .Compiler           = 'Compiler-CLangWindowsLatest'
    .ToolsBasePath      = '$LLVMBasePath$\bin'

    .Librarian          = '$ToolsBasePath$\llvm-lib.exe'
    .Linker             = '$ToolsBasePath$\lld-link.exe'

#if WITH_VISUALSTUDIO_TOOLSET_140
    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\lib\amd64"'
#endif
#if WITH_VISUALSTUDIO_TOOLSET_141
    .LinkerOptions      = ' /LIBPATH:"$VSBasePath$\VC\Tools\MSVC\$VSToolsVersion$\lib\x64"'
                        + ' /LIBPATH:"$VSBasePath$\VC\Auxiliary\VS\lib\x64"'
#endif
    .LinkerOptions      + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\ucrt\x64"'
                        + ' /LIBPATH:"$WindowsSDKBasePath$\Lib\$WindowsSDKVersion$\um\x64"'
]
.CLangWindowsLatestPlatformX64 + .CLangBasePlatformX64

//------------------------------------------------------------------------------
// Configurations
//------------------------------------------------------------------------------
.CLangWindowsLatest_X86Debug         = .CLangWindowsLatestPlatformX86   + .CLangBaseDebugConfig
.CLangWindowsLatest_X86FastDebug     = .CLangWindowsLatestPlatformX86   + .CLangBaseFastDebugConfig
.CLangWindowsLatest_X86Release       = .CLangWindowsLatestPlatformX86   + .CLangBaseReleaseConfig
.CLangWindowsLatest_X86Profiling     = .CLangWindowsLatestPlatformX86   + .CLangBaseProfilingConfig
.CLangWindowsLatest_X86Final         = .CLangWindowsLatestPlatformX86   + .CLangBaseFinalConfig

.CLangWindowsLatest_X64Debug         = .CLangWindowsLatestPlatformX64   + .CLangBaseDebugConfig
.CLangWindowsLatest_X64FastDebug     = .CLangWindowsLatestPlatformX64   + .CLangBaseFastDebugConfig
.CLangWindowsLatest_X64Release       = .CLangWindowsLatestPlatformX64   + .CLangBaseReleaseConfig
.CLangWindowsLatest_X64Profiling     = .CLangWindowsLatestPlatformX64   + .CLangBaseProfilingConfig
.CLangWindowsLatest_X64Final         = .CLangWindowsLatestPlatformX64   + .CLangBaseFinalConfig

.CLangWindowsLatestCompileConfigs =
{
    // X86
    .CLangWindowsLatest_X86Debug,
    .CLangWindowsLatest_X86FastDebug,
    .CLangWindowsLatest_X86Release,
    .CLangWindowsLatest_X86Profiling,
    .CLangWindowsLatest_X86Final,

    // X64
    .CLangWindowsLatest_X64Debug,
    .CLangWindowsLatest_X64FastDebug,
    .CLangWindowsLatest_X64Release,
    .CLangWindowsLatest_X64Profiling,
    .CLangWindowsLatest_X64Final,
}
