
//------------------------------------------------------------------------------
// Library Generation Helper (.lib)
//------------------------------------------------------------------------------
; Inputs :
;   <ProjectName>           name of the project
;   <ProjectPath>           path containing the source files
;   [PCHName]               precompiled header name (default value in Common.bff)
;   [ProjectDefines]        project specific defines (default value in Common.bff)
;   [ProjectDependencies]   project specific dependencies (default value in Common.bff)
;   [ProjectExcludedFiles]  project specific excluded files (default value in Common.bff)
;   [ProjectIncludes]       project specific includes (default value in Common.bff)
;   [ProjectLibraries]      project specific libraries (default value in Common.bff)
//------------------------------------------------------------------------------

.ProjectIncludes +
{
    '$ProjectPath$',
}

Unity( '$ProjectName$-Unity' )
{
    .UnityPCH = '$PCHName$.h'
    .UnityInputPath = '$ProjectPath$'
    .UnityOutputPath = '$UnityDirectory$\$ProjectName$'
    .UnityInputPattern = '*.cpp'
    .UnityInputExcludedFiles = .ProjectExcludedFiles
}

VCXProject( '$ProjectName$-Proj' )
{
    Using( .VisualStudioBaseConfig )

    .ProjectBasePath    = .ProjectPath
    .ProjectInputPaths  = .ProjectPath
    .ProjectOutput      = '$ProjectPath$/$ProjectName$.vcxproj'
}

ForEach( .CompileConfig in .AllCompileConfigs )
{
    Using( .CompileConfig )

    // Project directories
    .IntermediateDirectory  + '\$Platform$\$Config$'
    .OutputDirectory        + '\$Platform$\$Config$'

    // Project defines
    .CommandLineDefines = ''
    .Defines + .ProjectDefines
    ForEach( .define in .Defines )
    {
        .CommandLineDefines + ' $CompilerDefineFlag$"$define$"'
        Export( .CommandLineDefines )
    }

    // Project includes
    .CommandLineIncludes = ''
    .IncludePaths + .ProjectIncludes
    ForEach( .path in .IncludePaths )
    {
        .CommandLineIncludes + ' $CompilerIncludeFlag$"$path$"'
        Export( .CommandLineIncludes )
    }

    .CommandLineOptions = .CommandLineDefines + .CommandLineIncludes

    // Static library
    Library( '$ProjectName$-Lib-$Platform$-$Config$' )
    {
        .CompilerOutputPath = '$IntermediateDirectory$\$ProjectName$'

        // Preprocessor
        .PreprocessorOptions+ .CommandLineOptions

        // Precompiled header
        .PCHOptions         + ' /Yc"$PCHName$.h"'
                            + .CommandLineOptions
        .PCHInputFile       = '$ProjectPath$\$PCHName$.cpp'
        .PCHOutputFile      = '$CompilerOutputPath$\$PCHName$.pch'

        // Compiler
        .CompilerInputUnity = '$ProjectName$-Unity'
        .CompilerOptions    + ' /Yu"$PCHName$.h" /Fp"$PCHOutputFile$"'
                            + .CommandLineOptions

        // Librarian
        .LibrarianOutput    = '$CompilerOutputPath$\$ProjectName$.lib'
    }

    // Dynamic library
    DLL( '$ProjectName$-Dll-$Platform$-$Config$' )
    {
        .LinkerOutput       = '$BinaryDirectory$\$ProjectName$.$Config$.$Platform$.dll'
        .LinkerOptions      = "$DllOptions$ $LinkerOptions$"
        .Libraries          = { '$ProjectName$-Lib-$Platform$-$Config$' }
                            + .ProjectLibraries

        ForEach( .ProjectDependency in .ProjectDependencies )
        {
            .Libraries  + { '$ProjectDependency$-Lib-$Platform$-$Config$' }
            Export( .Libraries )
        }
    }
}
