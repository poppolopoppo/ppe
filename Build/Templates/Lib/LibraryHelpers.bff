
//------------------------------------------------------------------------------
// Library Generation Helper (.lib)
//------------------------------------------------------------------------------
; Inputs :
;   <ProjectName>           name of the project
;   <ProjectPath>           path containing the source files
;   [ProjectPCHName]        precompiled header name (default value in Defaults.bff)
;   [ProjectDefines]        project specific defines (default value in Defaults.bff)
;   [ProjectDependencies]   project specific dependencies (default value in Defaults.bff)
;   [ProjectExcludedFiles]  project specific excluded files (default value in Defaults.bff)
;   [ProjectIncludes]       project specific includes (default value in Defaults.bff)
;   [ProjectLibraries]      project specific libraries (default value in Defaults.bff)
;   [ProjectIsolatedFiles]  project files not included in unity builds but still compiled (default value in Defaults.bff)
;   [ProjectPCHConfig]      project Pre-Compiled Headers configuration to enable/disable PCH (default value in Defaults.bff)
;   [ProjectUseUnity]       project specific boolean : if true use unity input, else only ProjectIsolatedFiles
//------------------------------------------------------------------------------

.EvalParameters = {
    "ProjectPCHName",
    "ProjectDefines",
    "ProjectDependencies",
    "ProjectExcludedFiles",
    "ProjectIncludes",
    "ProjectLibraries",
    "ProjectIsolatedFiles",
    "ProjectPCHConfig",
    "ProjectUseUnity"
}

.ProjectConfigs = {}

ForEach( .CompileConfig in .AllCompileConfigs )
{
    .ProjectConfig = // Visual project config
    [
        Using( .CompileConfig )

        // Evaluate parameters for this configuration
        #include "EvalParameters.bff"

        // Project directories
        .IntermediateDirectory  + '\$Platform$\$Config$\$ProjectName$'
        .OutputDirectory        = .BinaryDirectory
        .UnityDirectory         = '$IntermediateDirectory$\Unity'

        // For VCXProj
        .PreprocessorDefinitions    = ''
        .IncludeSearchPath          = '$SourceDirectory$;$ProjectPath$'

        // Project compiled config
        .ProjectCompileConfig =
        [
            Using( .CompileConfig )

            // Project defines
            .Defines_Link_Obj   = { 'STATIC_LINK' }
            .Defines_Link_Lib   = { 'STATIC_LINK' }
            .Defines_Link_Dll   = { 'DYNAMIC_LINK' }

            .Defines    + ."Defines_Link_$ConfigLinkType$"
            .Defines    + "BUILDCONFIG_$Platform$_$Config$"
            .Defines    + .ProjectDefines

            ForEach( .define in .Defines )
            {
                ^CompilerOptions            + ' $CompilerDefineFlag$"$define$"'
                ^PreprocessorOptions        + ' $CompilerDefineFlag$"$define$"'
                ^PreprocessorDefinitions    + ';$define$'
            }

            // Project and System includes (project includes first, then system includes)
            .SystemIncludes     = .IncludePaths

            // Only for VCXProj
            ForEach( .path in .ProjectIncludes )
            {
                ^IncludeSearchPath          + ';$path$'
            }
            ForEach( .path in .SystemIncludes )
            {
                ^IncludeSearchPath          + ';$path$'
            }

            // For actual compilation
            .ProjectIncludes    + .SourceDirectory
                                + .ProjectPath

            .AllIncludes        = .ProjectIncludes + .SystemIncludes

            ForEach( .path in .AllIncludes )
            {
                ^CompilerOptions            + ' $CompilerIncludeFlag$"$path$"'
                ^PreprocessorOptions        + ' $CompilerIncludeFlag$"$path$"'
            }

#if USE_VISUALSTUDIO
            // PDB output path
            .CompilerOptions                + ' /Fd"$IntermediateDirectory$\$PlatformToolset$.pdb"'
#endif
        ]

        // Project Unity
        Unity( '$ProjectName$-Unity-$Platform$-$Config$' )
        {
            .UnityInputPath             = '$ProjectPath$'
            .UnityOutputPath            = .UnityDirectory
            .UnityInputPattern          = { '*.cpp', '*.c' }
            .UnityOutputPattern         = 'Unity_*_of_$UnityNumFiles$.cpp'
            .UnityInputExcludedFiles    = {}
            ForEach( .Filename in .ProjectExcludedFiles )
            {
                ^UnityInputExcludedFiles + "$ProjectPath$/$Filename$"
            }
            ForEach( .Filename in .ProjectIsolatedFiles )
            {
                ^UnityInputExcludedFiles + "$ProjectPath$/$Filename$"
            }

            // Pre-Compiled Headers
            .ProjectPCHOptions = []
            {
                Eval( .ProjectPCHConfig )
                ^ProjectPCHOptions = .ProjectCompileConfig + .ProjectPCHConfig
            }
            Using( .ProjectPCHOptions )
        }

        RemoveDir( '$ProjectName$-Unity-$Platform$-$Config$-Purge' )
        {
            .RemovePaths          = .UnityDirectory
            .RemovePathsPattern   = 'Unity*.cpp'
        }

        // Object list
        ObjectList( '$ProjectName$-Obj-$Platform$-$Config$' )
        {
            Using( .ProjectCompileConfig )

            .CompilerOutputPath = .IntermediateDirectory

            // Isolated files
            .CompilerInputFiles = {}
            ForEach( .Filename in .ProjectIsolatedFiles )
            {
                ^CompilerInputFiles + "$ProjectPath$/$Filename$"
            }

            // Unity files IFN
            .ProjectCompilerInputUnity_false = []
            .ProjectCompilerInputUnity_true = [ .CompilerInputUnity = '$ProjectName$-Unity-$Platform$-$Config$' ]
            Using( ."ProjectCompilerInputUnity_$ProjectUseUnity$" )

            // Pre-Compiled Headers
            .ProjectPCHOptions = []
            {
                Eval( .ProjectPCHConfig )
                ^ProjectPCHOptions = .ProjectCompileConfig + .ProjectPCHConfig
            }
            Using( .ProjectPCHOptions )
        }

        RemoveDir( '$ProjectName$-Obj-$Platform$-$Config$-Purge' )
        {
            .RemovePaths        = .IntermediateDirectory
        }

        // Static library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            .CompilerOutputPath = .IntermediateDirectory

            .LibrarianPCHConfig = .ProjectCompileConfig + .PCHDisabled
            Using( .LibrarianPCHConfig )

            .LibrarianOutput    = '$IntermediateDirectory$\$ProjectName$.$CompilerLibraryExtension$'
            .LibrarianAdditionalInputs = { '$ProjectName$-Obj-$Platform$-$Config$' }
        }

        RemoveDir( '$ProjectName$-Lib-$Platform$-$Config$-Purge' )
        {
            .RemovePaths        = .IntermediateDirectory
        }

        // Dynamic library
        DLL( '$ProjectName$-Dll-$Platform$-$Config$' )
        {
            .LinkerOutput       = '$BinaryDirectory$\$ProjectName$.$Config$.$Platform$.$CompilerDllExtension$'
            .LinkerOptions      = "$DllOptions$ $LinkerOptions$"

            .Libraries          = { '$ProjectName$-Lib-$Platform$-$Config$' }
#if USE_LIBRARY_DEPENDENCY_INPUT
            .Libraries          = { '$ProjectName$-Obj-$Platform$-$Config$' }
#endif
            .Libraries          + .ProjectLibraries

            ForEach( .ProjectDependency in .ProjectDependencies )
            {
                ^Libraries + { '$ProjectDependency$-Dll-$Platform$-$Config$' }
            }
        }

        RemoveDir( '$ProjectName$-Dll-$Platform$-$Config$-Purge' )
        {
            .RemovePaths          = .BinaryDirectory
            .RemovePathsPattern   = "$ProjectName$.$Config$.$Platform$.*"
            .PreBuildDependencies = { '$ProjectName$-Lib-$Platform$-$Config$-Purge' }
#if USE_LIBRARY_DEPENDENCY_INPUT
            .PreBuildDependencies = { '$ProjectName$-Obj-$Platform$-$Config$-Purge' }
#endif
        }

        // Purge alias
        Alias( '$ProjectName$-Purge-$Platform$-$Config$' )
        {
            .Targets =
            {
                '$ProjectName$-Unity-$Platform$-$Config$-Purge',
                '$ProjectName$-Obj-$Platform$-$Config$-Purge',
                '$ProjectName$-Lib-$Platform$-$Config$-Purge',
                '$ProjectName$-Dll-$Platform$-$Config$-Purge',
            }
        }

        // Override project directories for visual studio ONLY
#if __WINDOWS__
        .ProjectBasePath        = "$ProjectPath$"
        .Output                 = "$BinaryDirectory$\$ProjectName$.$Config$.$Platform$.$CompilerBinaryExtension$"
        .OutputDirectory        = "$BinaryDirectory$"
        .IntermediateDirectory  = "$IntermediateDirectory$"
        .ProjectBuildCommand    = '$VisualStudioFBuildCommand$ $VSBuildOptions$ "$ProjectName$-$Platform$-$Config$"'
        .ProjectRebuildCommand  = '$VisualStudioFBuildCommand$ $VSRebuildOptions$ -clean "$ProjectName$-$Platform$-$Config$"'
        .ProjectCleanCommand    = '$VisualStudioFBuildCommand$ $VSCleanOptions$ -clean "$ProjectName$-Purge-$Platform$-$Config$"'
        .Platform               = .SolutionPlatform
#endif
    ]

    ^ProjectConfigs + .ProjectConfig
}

VCXProject( '$ProjectName$-Proj' )
{
    Using( .VisualStudioBaseConfig )

    .ProjectBasePath    = .ProjectPath
    .ProjectInputPaths  = .ProjectPath
    .ProjectOutput      = '$SolutionPath$/Output/Projects/$ProjectName$.vcxproj'
}
