
//------------------------------------------------------------------------------
// Library Generation Helper (.lib)
//------------------------------------------------------------------------------
; Inputs :
;   <ProjectName>           name of the project
;   <ProjectPath>           path containing the source files
;   [PCHName]               precompiled header name (default value in Common.bff)
;   [ProjectDefines]        project specific defines (default value in Common.bff)
;   [ProjectDependencies]   project specific dependencies (default value in Common.bff)
;   [ProjectExcludedFiles]  project specific excluded files (default value in Common.bff)
;   [ProjectIncludes]       project specific includes (default value in Common.bff)
;   [ProjectLibraries]      project specific libraries (default value in Common.bff)
;   [ProjectIsolatedFiles]  project files not included in unity builds but still compiled (default value in Common.bff)
//------------------------------------------------------------------------------

.ProjectIncludes +
{
    '$ProjectPath$',
}

Unity( '$ProjectName$-Unity' )
{
    .UnityPCH = '$PCHName$.h'
    .UnityInputPath = '$ProjectPath$'
    .UnityOutputPath = '$UnityDirectory$\$ProjectName$'
    .UnityInputPattern = '*.cpp' // TODO: { '*.cpp', '*.c' }
    .UnityInputExcludedFiles = {}
    ForEach( .Filename in .ProjectExcludedFiles )
    {
        ^UnityInputExcludedFiles + "$ProjectPath$/$Filename$"
    }
    ForEach( .Filename in .ProjectIsolatedFiles )
    {
        ^UnityInputExcludedFiles + "$ProjectPath$/$Filename$"
    }
}

RemoveDir( '$ProjectName$-Unity-Purge' )
{
    .RemovePaths          = '$UnityDirectory$\$ProjectName$'
    .RemovePathsPattern   = 'Unity*.cpp'
}

.ProjectConfigs = { .VisualStudioDummyProjectConfig } ; TODO: Ã  virer

ForEach( .CompileConfig in .AllCompileConfigs )
{
    .ProjectConfig = // Visual project config
    [
        Using( .CompileConfig )

        // Project directories
        .IntermediateDirectory  + '\$Platform$\$Config$\$ProjectName$'
        .OutputDirectory        = .BinaryDirectory

        // Project defines
        .CommandLineDefines = ''
        .PreprocessorDefinitions = ''
        .Defines + .ProjectDefines
        ForEach( .define in .Defines )
        {
            ^CommandLineDefines + ' $CompilerDefineFlag$"$define$"'
            ^PreprocessorDefinitions + ';$define$'
        }

        // Project includes
        .CommandLineIncludes = ''
        .IncludeSearchPath = ''
        .IncludePaths + .ProjectIncludes + '.' // current dir
        ForEach( .path in .IncludePaths )
        {
            ^CommandLineIncludes + ' $CompilerIncludeFlag$"$path$"'
            ^IncludeSearchPath + ';$path$'
        }

        .CommandLineOptions = .CommandLineDefines + .CommandLineIncludes

        // Static library
        Library( '$ProjectName$-Lib-$Platform$-$Config$' )
        {
            .CompilerOutputPath = .IntermediateDirectory

            // Preprocessor
            .PreprocessorOptions+ .CommandLineOptions

            // Precompiled header
            .PCHOptions         + ' $CompilerCreatePCHFlag$"$PCHName$.h"'
                                + .CommandLineOptions
            .PCHInputFile       = '$ProjectPath$\$PCHName$.cpp'
            .PCHOutputFile      = '$CompilerOutputPath$\$PCHName$.pch'

            // Compiler
            .CompilerInputFiles = {}
            ForEach( .Filename in .ProjectIsolatedFiles )
            {
                ^CompilerInputFiles + "$ProjectPath$/$Filename$"
            }
            .CompilerInputUnity = '$ProjectName$-Unity'
            .CompilerOptions    + ' $CompilerUsePCHFlag$"$PCHName$.h" $CompilerOutputPCHFlag$"$PCHOutputFile$"'
                                + .CommandLineOptions

            // Librarian
            .LibrarianOutput    = '$CompilerOutputPath$\$ProjectName$.$CompilerLibraryExtension$'
        }

        RemoveDir( '$ProjectName$-Lib-$Platform$-$Config$-Purge' )
        {
            .RemovePaths        = .IntermediateDirectory
        }

        // Dynamic library
        DLL( '$ProjectName$-Dll-$Platform$-$Config$' )
        {
            .LinkerOutput       = '$BinaryDirectory$\$ProjectName$.$Config$.$Platform$.dll'
            .LinkerOptions      = "$DllOptions$ $LinkerOptions$"
            .Libraries          = { '$ProjectName$-Lib-$Platform$-$Config$' }
                                + .ProjectLibraries

            ForEach( .ProjectDependency in .ProjectDependencies )
            {
                ^Libraries + { '$ProjectDependency$-Lib-$Platform$-$Config$' }
            }
        }

        RemoveDir( '$ProjectName$-Dll-$Platform$-$Config$-Purge' )
        {
            .RemovePaths          = .BinaryDirectory
            .RemovePathsPattern   = "$ProjectName$.$Config$.$Platform$.*"
            .PreBuildDependencies = { '$ProjectName$-Lib-$Platform$-$Config$-Purge' }
        }

        // Override project directories for visual studio ONLY
        .Output                 = "$VisualStudioOutputDirectory$\$ProjectName$.$Config$.$Platform$.exe"
        .OutputDirectory        = .VisualStudioOutputDirectory
        .IntermediateDirectory  = .VisualStudioIntermediateDirectory
    ]

    ^ProjectConfigs + .ProjectConfig
}

VCXProject( '$ProjectName$-Proj' )
{
    Using( .VisualStudioBaseConfig )

    .ProjectBasePath    = .ProjectPath
    .ProjectInputPaths  = .ProjectPath
    .ProjectOutput      = '$ProjectPath$/$ProjectName$.vcxproj'
}
