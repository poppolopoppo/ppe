
//------------------------------------------------------------------------------
// Executable Generation (.exe)
//------------------------------------------------------------------------------
; Inputs :
;   <BinaryPrefix>          prefix of the binary
;   <ProjectName>           name of the project
;   <ProjectPath>           path containing the source files
;   [ProjectPCHName]        precompiled header name (default value in Defaults.bff)
;   [ProjectDefines]        project specific defines (default value in Defaults.bff)
;   [ProjectPublicDependencies]   project specific public dependencies like dll (default value in Defaults.bff)
;   [ProjectPrivateDependencies]   project specific private dependencies like lib (default value in Defaults.bff)
;   [ProjectRuntimeDependencies]   project specific runtime dependencies like dll (default value in Defaults.bff)
;   [ProjectExcludedFiles]  project specific excluded files (default value in Defaults.bff)
;   [ProjectForcedIncludes] project specific force includes (default value in Defaults.bff)
;   [ProjectIncludes]       project specific includes (default value in Defaults.bff)
;   [ProjectLibraries]      project specific libraries (default value in Defaults.bff)
;   [ProjectPostBuild]      project specific post-build (default value in Defaults.bff)
;   [ProjectPreBuild]       project specific pre-build (default value in Defaults.bff)
;   [ProjectPCHConfig]      project Pre-Compiled Headers configuration to enable/disable PCH (default value in Defaults.bff)
;   [ProjectUseIncrementalLinker] project specific boolean : if true use incremental linker
//------------------------------------------------------------------------------

#include "Lib/LibraryHelpers.bff"

//------------------------------------------------------------------------------
// Executable Configurations
//------------------------------------------------------------------------------
ForEach( .CompileConfig in .AllCompileConfigs )
{
    Using( .CompileConfig )

    // Project directories
    .IntermediateRoot   = .IntermediatePath + '/$Platform$/$Config$'
    .IntermediatePath   = '$IntermediateRoot$/$ProjectName$'
    .OutputPath         = .BinaryPath

    // Project Libraries
    ForEach( .Lib in .ProjectLibraries )
    {
        ^LinkerOptions  + ' "$Lib$"'
    }

    // Windows resources compiler (.res)
#if __WINDOWS__
    ObjectList( '$ProjectName$-Res-$Platform$-$Config$' )
    {
        Using( .ResourceCompiler )

        .CompilerInputFiles     = '$ProjectPath$/resource.rc'
        .CompilerOutputPath     = .IntermediatePath

        .CompilerOptions = '/I"$SourcePath$" /I"$ProjectPath$" $CompilerOptions$'
    }
#endif

    // Binary executable
    Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
    {
        .LinkerVerboseOutput = true

        .LinkerOutput       = '$IntermediateRoot$/$BinaryPrefix$-$Platform$-$Config$.$CompilerBinaryExtension$'
        .LinkerOptions      + .ExecutableOptions

        If( .ProjectUseIncrementalLinker == .False )
        {
            ^LinkerOptions - .LinkerIncremental
        }

#if USE_LIBRARY_DEPENDENCY_INPUT
        .LinkerLinkObjects  = true
#endif

        .Libraries          = { '$ProjectName$-Obj-$Platform$-$Config$' }

        .ProjectDependencies    = {}
                                + .ProjectPrivateDependencies
                                + .ProjectPublicDependencies
#if __WINDOWS__
                                + '$ProjectName$-Res'
#endif

        ForEach( .ProjectDependency in .ProjectDependencies )
        {
            ^Libraries + { '$ProjectDependency$-$Platform$-$Config$' }
        }

        .PreBuildDependencies = .ExecutableDeps
    }

    // Copy all binaries from intermediate to output path
    Copy( '$ProjectName$-CopyOutput-$Platform$-$Config$' )
    {
        .Source             = {}
                            + '$ProjectName$-Exe-$Platform$-$Config$'

        .SharedLib          = 'Dll'
        If( .ConfigLinkType == .SharedLib )
        {
            ForEach( .ProjectDependency in .ProjectPublicDependencies )
            {
                // need to copy referenced dlls next to the binary or they won't be found
                ^Source     + '$ProjectDependency$-$Platform$-$Config$'
            }
        }

        ForEach( .ProjectDependency in .ProjectRuntimeDependencies )
        {
            // need to copy referenced dlls next to the binary or they won't be found
            ^Source     + '$ProjectDependency$-$Platform$-$Config$'
        }


        .Dest               = '$BinaryPath$/'
    }

    // The main target is an alias to bulk compilation, copy and potentially user provided tasks
    Alias( '$ProjectName$-$Platform$-$Config$' )
    {
        .PreBuildDependencies   = .ProjectPreBuild

        // Runtime dependencies a built but not linked against the artefact
        ForEach( .ProjectDependency in .ProjectRuntimeDependencies )
        {
            ^PreBuildDependencies + '$ProjectDependency$-$Platform$-$Config$'
        }

        .Targets                = {}
                                + '$ProjectName$-Exe-$Platform$-$Config$'
                                + '$ProjectName$-CopyOutput-$Platform$-$Config$'
                                + .ProjectPostBuild
    }

    RemoveDir( '$ProjectName$-$Platform$-$Config$-Purge' )
    {
        .RemovePaths            = .BinaryPath
        .RemovePathsPattern     = "$BinaryPrefix$.$Config$.$Platform$.*"
        .PreBuildDependencies   = { '$ProjectName$-Purge-$Platform$-$Config$' }
    }
}

#include "Lib/LibraryAliases.bff"
#include "Lib/RegisterProject.bff"
