
//------------------------------------------------------------------------------
// Executable Generation (.exe)
//------------------------------------------------------------------------------
; Inputs :
;   <BinaryPrefix>           prefix of the binary
;   <ProjectName>           name of the project
;   <ProjectPath>           path containing the source files
;   [ProjectPCHName]        precompiled header name (default value in Defaults.bff)
;   [ProjectDefines]         project specific defines (default value in Defaults.bff)
;   [ProjectDependencies]   project specific dependencies (default value in Defaults.bff)
;   [ProjectExcludedFiles]  project specific excluded files (default value in Defaults.bff)
;   [ProjectForcedIncludes] project specific force includes (default value in Defaults.bff)
;   [ProjectIncludes]       project specific includes (default value in Defaults.bff)
;   [ProjectLibraries]      project specific libraries (default value in Defaults.bff)
;   [ProjectPostBuild]      project specific post-build (default value in Defaults.bff)
;   [ProjectPreBuild]       project specific pre-build (default value in Defaults.bff)
;   [ProjectPCHConfig]       project Pre-Compiled Headers configuration to enable/disable PCH (default value in Defaults.bff)
//------------------------------------------------------------------------------

#include "Lib/LibraryHelpers.bff"

//------------------------------------------------------------------------------
// Executable Configurations
//------------------------------------------------------------------------------
ForEach( .CompileConfig in .AllCompileConfigs )
{
    Using( .CompileConfig )

    // Project directories
    .IntermediateDirectory  + '\$Platform$\$Config$\$ProjectName$'
    .OutputDirectory        = .BinaryDirectory

    // Project Libraries
    ForEach( .Lib in .ProjectLibraries )
    {
        ^LinkerOptions + ' "$Lib$"'
    }

    // Windows resources compiler (.res)
#if __WINDOWS__
    ObjectList( '$ProjectName$-Res-$Platform$-$Config$' )
    {
        Using( .ResourceCompiler )

        .CompilerInputFiles     = '$ProjectPath$\$ProjectName$.rc'
        .CompilerOutputPath     = .IntermediateDirectory

        .CompilerOptions = '/i"$SourceDirectory$" /i"$ProjectPath$" $CompilerOptions$'
    }
#endif

    // Binary executable
    Executable( '$ProjectName$-Exe-$Platform$-$Config$' )
    {
        .LinkerOutput   = '$BinaryDirectory$\$BinaryPrefix$.$Config$.$Platform$.$CompilerBinaryExtension$'
        .LinkerOptions  + .ExecutableOptions


        .Libraries = {}
        ForEach( .ProjectDependency in .ProjectDependencies )
        {
            ^Libraries + { '$ProjectDependency$-$Platform$-$Config$' }
        }

        .Libraries + '$ProjectName$-Obj-$Platform$-$Config$'

        .LinkerLinkObjects = false
#if USE_LIBRARY_DEPENDENCY_INPUT
        .LinkerLinkObjects = true
#endif

#if __WINDOWS__
        .Libraries + '$ProjectName$-Res-$Platform$-$Config$'
#endif
    }

    Alias( '$ProjectName$-$Platform$-$Config$' )
    {
        .Targets    = .ProjectPreBuild
                    + { '$ProjectName$-Exe-$Platform$-$Config$' }
                    + .ProjectPostBuild
    }

    RemoveDir( '$ProjectName$-$Platform$-$Config$-Purge' )
    {
        .RemovePaths          = .BinaryDirectory
        .RemovePathsPattern   = "$BinaryPrefix$.$Config$.$Platform$.*"
        .PreBuildDependencies = { '$ProjectName$-Purge-$Platform$-$Config$' }
    }
}

#include "Lib/Aliases.bff"
#include "Lib/RegisterProject.bff"
