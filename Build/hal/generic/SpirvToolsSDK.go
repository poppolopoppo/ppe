package generic

import (
	. "build/compile"
	. "build/utils"
	"bytes"
	"fmt"
	"io"
	"path/filepath"
	"strings"
)

var SpirvTools = RegisterArchetype("SDK/SPIRV-TOOLS", func(rules *ModuleRules) {
	extractDir := rules.ModuleDir.AbsoluteFolder(rules.Exports.Get("SpirvTools/Path"))

	LogTrace("SPIRV-Tools: use '%v' as extraction path", extractDir)

	rules.Generate(PUBLIC, "spirv-tools-headers.generated.h", SpirvToolsGeneratedHeader{
		ExtractDir: extractDir,
	})
})

/***************************************
 * Spirv-Tools header generator
 ***************************************/

type SpirvToolsGeneratedHeader struct {
	ExtractDir Directory
}

func (g SpirvToolsGeneratedHeader) GetDigestable(o *bytes.Buffer) {
	o.WriteString("SpirvToolsGeneratedHeader-1.0.0")
	g.ExtractDir.GetDigestable(o)
}
func (g SpirvToolsGeneratedHeader) Generate(ctx GeneratorContext, dst io.Writer) error {
	var useDebugSDK bool
	switch ctx.Env.GetConfig().ConfigType {
	case CONFIG_DEBUG, CONFIG_FASTDEBUG:
		useDebugSDK = true
	case CONFIG_DEVEL, CONFIG_TEST, CONFIG_SHIPPING:
		useDebugSDK = false
	default:
		UnexpectedValue(ctx.Env.GetConfig().ConfigType)
	}

	config := getSpirvToolsConfig(useDebugSDK)
	downloader := getSpirvToolsDownloader(config)
	ctx.DependsOn(downloader)

	extractDir := g.ExtractDir.Folder(config)
	ar := getSpirvToolsExtractor(downloader, extractDir)
	ctx.DependsOn(ar)

	cpp := NewCppFile(dst, false)
	cpp.Comment("SPIRV-Tools header generated by %v/%v", MAIN_SIGNATURE, ctx.Unit.Target)
	cpp.Pragma("once")

	includeDir := ar.Destination.Folder("install", "include")
	includeRe := MakeGlobRegexp(spirvToolsGlobIncludes...)
	for _, x := range ar.ExtractedFiles {
		rel := x.Relative(ar.Destination)
		if includeRe.MatchString(rel) {
			cpp.Pragma("include_alias(\"%v\", \"%v\")",
				strings.ReplaceAll(x.Relative(includeDir), "\\", "/"),
				strings.ReplaceAll(x.Relative(UFS.Source), "\\", "/"))
		}
	}

	return nil
}

/***************************************
 * Download spirv-tools release from googleapis
 ***************************************/

var spirvToolsGlobIncludes = NewStringSet(
	"install/include/spirv-tools/*",
)

func getSpirvToolsExtractor(download *Downloader, extractDir Directory) *ArchiveExtractor {
	return NewArchiveExtractorFromExt(
		download.Destination,
		extractDir,
		spirvToolsGlobIncludes,
		download.Alias())
}

const spirvToolsUseFrozenArtifacts = true

// already happened that CI would fail, and not binary was available on HEAD...
var spirvToolsFrozenArtifactUris = map[string]string{
	"windows_vs2017_release": "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/windows-msvc-2017-release/continuous/1691/20220215-161749/install.zip",
	"windows_vs2017_debug":   "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/windows-msvc-2017-debug/continuous/1409/20220304-121700/install.zip",
	"linux_clang_release":    "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/linux-clang-release/continuous/1707/20220304-122028/install.tgz",
	"linux_clang_debug":      "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/linux-clang-debug/continuous/1718/20220304-122547/install.tgz",
	"macos_clang_release":    "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/macos-clang-release/continuous/1719/20220304-121705/install.tgz",
	"macos_clang_debug":      "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/macos-clang-debug/continuous/1725/20220304-121703/install.tgz",
}

var getSpirvToolsConfig = MemoizePod(func(debug bool) string {
	var config string
	switch CurrentHost().Id {
	case HOST_WINDOWS:
		config = "windows_vs2017"
	case HOST_LINUX:
		config = "linux_clang"
	case HOST_DARWIN:
		config = "macos_clang"
	default:
		NotImplemented("SPIRV-Tools: no support available for platform '%s'", CurrentHost().Id)
	}
	if debug {
		config += "_debug"
	} else {
		config += "_release"
	}
	return config
})

var getSpirvToolsDownloader = MemoizePod(func(config string) *Downloader {
	dst := UFS.Transient.Folder("SDK").File("spirv-tools-master-" + config + ".zip")
	if spirvToolsUseFrozenArtifacts {
		if frozenUrl, ok := spirvToolsFrozenArtifactUris[config]; ok {
			dst = dst.ReplaceExt(filepath.Ext(frozenUrl))
			return NewDownloader(frozenUrl, dst, DOWNLOAD_DEFAULT)
		} else {
			LogPanic("spirv-tools: unknown frozen artifact for <%v>", config)
			return nil
		}
	} else {
		latestUrl := fmt.Sprintf("https://storage.googleapis.com/spirv-tools/badges/build_link_%s.html", config)
		return NewDownloader(latestUrl, dst, DOWNLOAD_REDIRECT)
	}
})
